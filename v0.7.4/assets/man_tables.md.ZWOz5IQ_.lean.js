import{_ as n,C as r,c as o,o as d,aA as p,j as a,G as t,a as i,w as l}from"./chunks/framework.D35HFhGe.js";const h="/GeoParams.jl/v0.7.4/assets/LaTeX_table.1KyHe6BZ.PNG",u="/GeoParams.jl/v0.7.4/assets/markdown_table.BxH-Ehhd.PNG",x=JSON.parse('{"title":"Tables","description":"","frontmatter":{},"headers":[],"relativePath":"man/tables.md","filePath":"man/tables.md","lastUpdated":null}'),k={name:"man/tables.md"},m={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""};function E(T,e,P,F,j,D){const s=r("Badge");return d(),o("div",null,[e[24]||(e[24]=p("",11)),a("details",m,[a("summary",null,[e[0]||(e[0]=a("a",{id:"GeoParams.Tables.ParameterTable",href:"#GeoParams.Tables.ParameterTable"},[a("span",{class:"jlbinding"},"GeoParams.Tables.ParameterTable")],-1)),e[1]||(e[1]=i()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=a("p",null,'ParameterTable() creates a table with all parameters saved in the Phase struct. It lets you choose between "latex" and "markdown" as table formats with LaTeX as default. Creates a filename.tex or filename.md file as output. If "latex" is chosen a "Reference.bib" file will automatically be produced with all your references. Storage path by default is the GeoParams package folder. A specific storage path can be given as normal path with "\\filename" in the end as a string. Use double backslash for subfolders. There is no file extension needed to be given.',-1)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[2]||(e[2]=[a("a",{href:"https://github.com/JuliaGeodynamics/GeoParams.jl/blob/32135067150d5ad7e63b2669c049a58ae65febda/src/Tables.jl#L1172-L1177",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),a("details",b,[a("summary",null,[e[4]||(e[4]=a("a",{id:"GeoParams.Tables.Phase2Dict",href:"#GeoParams.Tables.Phase2Dict"},[a("span",{class:"jlbinding"},"GeoParams.Tables.Phase2Dict")],-1)),e[5]||(e[5]=i()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[7]||(e[7]=a("p",null,"Phase2Dict() puts all parameters of a phase s in a dict.",-1)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[6]||(e[6]=[a("a",{href:"https://github.com/JuliaGeodynamics/GeoParams.jl/blob/32135067150d5ad7e63b2669c049a58ae65febda/src/Tables.jl#L32-L34",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),a("details",c,[a("summary",null,[e[8]||(e[8]=a("a",{id:"GeoParams.Tables.Phase2DictMd",href:"#GeoParams.Tables.Phase2DictMd"},[a("span",{class:"jlbinding"},"GeoParams.Tables.Phase2DictMd")],-1)),e[9]||(e[9]=i()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[11]||(e[11]=a("p",null,"Phase2DictMd() puts all parameters of a phase in a dict.",-1)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[10]||(e[10]=[a("a",{href:"https://github.com/JuliaGeodynamics/GeoParams.jl/blob/32135067150d5ad7e63b2669c049a58ae65febda/src/Tables.jl#L659-L662",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),a("details",g,[a("summary",null,[e[12]||(e[12]=a("a",{id:"GeoParams.Tables.Dict2LatexTable",href:"#GeoParams.Tables.Dict2LatexTable"},[a("span",{class:"jlbinding"},"GeoParams.Tables.Dict2LatexTable")],-1)),e[13]||(e[13]=i()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[15]||(e[15]=a("p",null,"Dict2LatexTable() writes a .tex file with all parameters from the Phase2Dict() output in a LaTeX table. rdigits will round numbers with more decimals than rdigits including numbers of 10 to power of n, n being an Integer, for representation purposes. For the exact numbers use the original implemented numbers from the creeplaws of the dict in src/CreepLaw/Data/DiffusionCreep.jl or src/CreepLaw/Data/DislocationCreep.jl.",-1)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[14]||(e[14]=[a("a",{href:"https://github.com/JuliaGeodynamics/GeoParams.jl/blob/32135067150d5ad7e63b2669c049a58ae65febda/src/Tables.jl#L387-L393",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),a("details",f,[a("summary",null,[e[16]||(e[16]=a("a",{id:"GeoParams.Tables.Dict2MarkdownTable",href:"#GeoParams.Tables.Dict2MarkdownTable"},[a("span",{class:"jlbinding"},"GeoParams.Tables.Dict2MarkdownTable")],-1)),e[17]||(e[17]=i()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[19]||(e[19]=a("p",null,"Dict2MarkdownTable() writes a .md file with all parameters from the Phase2DictMd() output in a Markdown table. rdigits will round numbers with more decimals than rdigits including numbers of 10 to power of n, n being an Integer, for representation purposes. For the exact numbers use the original implemented numbers from the creeplaws of the dict in src/CreepLaw/Data/DiffusionCreep.jl or src/CreepLaw/Data/DislocationCreep.jl.",-1)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[18]||(e[18]=[a("a",{href:"https://github.com/JuliaGeodynamics/GeoParams.jl/blob/32135067150d5ad7e63b2669c049a58ae65febda/src/Tables.jl#L987-L992",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),a("details",y,[a("summary",null,[e[20]||(e[20]=a("a",{id:"GeoParams.Tables.detachFloatfromExponent",href:"#GeoParams.Tables.detachFloatfromExponent"},[a("span",{class:"jlbinding"},"GeoParams.Tables.detachFloatfromExponent")],-1)),e[21]||(e[21]=i()),t(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[23]||(e[23]=a("p",null,'detachFloatfromExponent() returns the number of float decimals after the comma as Integer, the float number without the exponent as string and the exponent after the "e" as string. The argument output returns "1" for "ex" if the input number has no exponent.',-1)),t(s,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[22]||(e[22]=[a("a",{href:"https://github.com/JuliaGeodynamics/GeoParams.jl/blob/32135067150d5ad7e63b2669c049a58ae65febda/src/Tables.jl#L11-L16",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})])])}const C=n(k,[["render",E]]);export{x as __pageData,C as default};
