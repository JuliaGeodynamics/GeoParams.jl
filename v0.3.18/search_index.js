var documenterSearchIndex = {"docs":
[{"location":"man/phasediagrams/#Phase-Diagrams","page":"Phase Diagrams","title":"Phase Diagrams","text":"","category":"section"},{"location":"man/phasediagrams/","page":"Phase Diagrams","title":"Phase Diagrams","text":"It is possible to employ phase diagrams as lookup tables, which can be used to compute density, melt fraction or seismic properties, for example. ","category":"page"},{"location":"man/phasediagrams/#Perple_X","page":"Phase Diagrams","title":"Perple_X","text":"","category":"section"},{"location":"man/phasediagrams/","page":"Phase Diagrams","title":"Phase Diagrams","text":"A popular way to compute phase diagrams (pseudosections) for a given (fixed) chemical composition as a function of pressure and temperature is by using Perple_X. Once a stable assemblage is computed, through Gibbs energy minimisation, it allows you to output a large number of properties such as density, melt fraction or seismic velocities.","category":"page"},{"location":"man/phasediagrams/","page":"Phase Diagrams","title":"Phase Diagrams","text":"Within GeoParams, we can import this diagram (provided it is formatted in the same manner as LaMEM expects Perple_X input to be).","category":"page"},{"location":"man/phasediagrams/","page":"Phase Diagrams","title":"Phase Diagrams","text":"GeoParams.MaterialParameters.PhaseDiagrams.PerpleX_LaMEM_Diagram\nGeoParams.MaterialParameters.PhaseDiagrams.PhaseDiagram_LookupTable","category":"page"},{"location":"man/phasediagrams/#GeoParams.PerpleX_LaMEM_Diagram","page":"Phase Diagrams","title":"GeoParams.PerpleX_LaMEM_Diagram","text":"PD_Data = PerpleX_LaMEM_Diagram(fname::String; CharDim = nothing)\n\nReads a precomputed phase diagram in the LaMEM/Perple_X format (which is a phase diagram computed using Perple_X, but formatted in a manner that is readable using LaMEM). The data is stored in the PhaseDiagram_LookupTable structure.\n\nIf the CharDim object is specified, the values of all diagrams will be non-dimensionalized.\n\nExample\n\njulia> PD_Data = PerpleX_LaMEM_Diagram(\"./test_data/Peridotite.in\")\nPerple_X/LaMEM Phase Diagram Lookup Table: \n                      File    :   ./test_data/Peridotite.in\n                      T       :   293.0 - 1573.000039\n                      P       :   1.0e7 - 2.9999999944e9\n                      fields  :   :meltRho, :meltRho, :meltFrac, :rockRho, :Rho, :rockVp\n                                  :rockVs, :rockVpVs, :meltVp, :meltVs, :meltVpVs\n                                  :Vp, :Vs, :VpVs\n\nOnce imported, the properties on the diagram can be interpolated in a simple manner:\n\njulia> PD_Data.Rho(1500,1e7)\n3042.836820256982\n\nThis also works for vectors or arrays:\n\njulia> T = [1500 1800; 1233 1300]\njulia> P = [1e8 1e9; 1e7 1e7]\njulia> rho = PD_Data.Rho.(T,P)\n\n(Note the dot . in front of the bracket while evaluating arrays).\n\nThe fields that are available depend on what is listed in the diagram file.  The units of the fields are automatically evaluated, and employed to non-dimensionalize the parameters if CharDim is specified. \n\nAlgorithm\n\nInternally, we employ linear interpolation, as provided by the Interpolations.jl package. Values outside the range of the diagram are set to the boundary of the diagram. The interpolation object is directly encoded in the PhaseDiagram_LookupTable` object.  \n\n\n\n\n\n","category":"function"},{"location":"man/phasediagrams/#GeoParams.MaterialParameters.PhaseDiagrams.PhaseDiagram_LookupTable","page":"Phase Diagrams","title":"GeoParams.MaterialParameters.PhaseDiagrams.PhaseDiagram_LookupTable","text":"Contains data of a Phase Diagram that is regularly spaced in P & T\n\n\n\n\n\n","category":"type"},{"location":"man/materialparameters/#MaterialParameters","page":"Material Parameters","title":"MaterialParameters","text":"","category":"section"},{"location":"man/materialparameters/","page":"Material Parameters","title":"Material Parameters","text":"Material properties for a given phase can be set with SetMaterialParams, whereas all properties are  stored in the MaterialParams structure. Information about the material parameter is found at MaterialParamsInfo. This can be employed ","category":"page"},{"location":"man/materialparameters/","page":"Material Parameters","title":"Material Parameters","text":"MaterialParamsInfo\nSetMaterialParams\nMaterialParams","category":"page"},{"location":"man/materialparameters/#GeoParams.MaterialParameters.MaterialParamsInfo","page":"Material Parameters","title":"GeoParams.MaterialParameters.MaterialParamsInfo","text":"MaterialParamsInfo\n\nStructure that holds information (Equation, Comment, BibTex_Reference) about a given material parameter, which can be used to create parameter tables, documentation etc.\n\nUsually used in combination with param_info(the_parameter_of_interest)\n\n\n\n\n\n","category":"type"},{"location":"man/materialparameters/#GeoParams.MaterialParameters.SetMaterialParams","page":"Material Parameters","title":"GeoParams.MaterialParameters.SetMaterialParams","text":"SetMaterialParams(; Name::String=\"\", Phase::Int64=1,\n                    Density             =   nothing, \n                    Gravity             =   nothing,\n                    CreepLaws           =   nothing, \n                    Elasticity          =   nothing, \n                    Plasticity          =   nothing, \n                    CompositeRheology   =   nothing,\n                    Conductivity        =   nothing, \n                    HeatCapacity        =   nothing, \n                    RadioactiveHeat     =   nothing,\n                    LatentHeat          =   nothing,\n                    ShearHeat           =   nothing,\n                    Melting             =   nothing,\n                    SeismicVelocity     =   nothing,\n                    CharDim::GeoUnits   =   nothing)\n\nSets material parameters for a given phase. \n\nIf CharDim is specified the input parameters are non-dimensionalized.   Note that if Density is specified, we also set Gravity even if not explicitly listed\n\nExamples\n\nDefine two viscous creep laws & constant density:\n\njulia> Phase = SetMaterialParams(Name=\"Viscous Matrix\",\n                       Density   = ConstantDensity(),\n                       CreepLaws = (PowerlawViscous(), LinearViscous(η=1e21Pa*s)))\nPhase 1 : Viscous Matrix\n        | [dimensional units]\n        | \n        |-- Density           : Constant density: ρ=2900 kg m⁻³ \n        |-- Gravity           : Gravitational acceleration: g=9.81 m s⁻² \n        |-- CreepLaws         : Powerlaw viscosity: η0=1.0e18 Pa s, n=2.0, ε0=1.0e-15 s⁻¹  \n        |                       Linear viscosity: η=1.0e21 Pa s\n\nDefine two viscous creep laws & P/T dependent density and nondimensionalize\n\njulia> CharUnits_GEO   =   GEO_units(viscosity=1e19, length=1000km);\njulia> Phase = SetMaterialParams(Name=\"Viscous Matrix\", Phase=33,\n                              Density   = PT_Density(),\n                              CreepLaws = (PowerlawViscous(n=3), LinearViscous(η=1e23Pa*s)),\n                              CharDim   = CharUnits_GEO)\nPhase 33: Viscous Matrix\n        | [non-dimensional units]\n        | \n        |-- Density           : P/T-dependent density: ρ0=2.9e-16, α=0.038194500000000006, β=0.01, T0=0.21454659702313156, P0=0.0 \n        |-- Gravity           : Gravitational acceleration: g=9.810000000000002e18 \n        |-- CreepLaws         : Powerlaw viscosity: η0=0.1, n=3, ε0=0.001  \n        |                       Linear viscosity: η=10000.0 \n\nYou can also create an array that holds several parameters:\n\njulia> MatParam        =   Array{MaterialParams, 1}(undef, 2);\njulia> Phase           =   1;\njulia> MatParam[Phase] =   SetMaterialParams(Name=\"Upper Crust\", Phase=Phase,\n                            CreepLaws= (PowerlawViscous(), LinearViscous(η=1e23Pa*s)),\n                            Density  = ConstantDensity(ρ=2900kg/m^3));\njulia> Phase           =   2;\njulia> MatParam[Phase] =   SetMaterialParams(Name=\"Lower Crust\", Phase=Phase,\n                            CreepLaws= (PowerlawViscous(n=5), LinearViscous(η=1e21Pa*s)),\n                            Density  = PT_Density(ρ0=3000kg/m^3));\njulia> MatParam\n2-element Vector{MaterialParams}:\n Phase 1 : Upper Crust\n    | [dimensional units]\n    | \n    |-- Density           : Constant density: ρ=2900 kg m⁻³ \n    |-- Gravity           : Gravitational acceleration: g=9.81 m s⁻² \n    |-- CreepLaws         : Powerlaw viscosity: η0=1.0e18 Pa s, n=2.0, ε0=1.0e-15 s⁻¹  \n    |                       Linear viscosity: η=1.0e23 Pa s \n                            \n Phase 2 : Lower Crust\n    | [dimensional units]\n    | \n    |-- Density           : P/T-dependent density: ρ0=3000 kg m⁻³, α=3.0e-5 K⁻¹, β=1.0e-9 Pa⁻¹, T0=0 °C, P0=0 MPa \n    |-- Gravity           : Gravitational acceleration: g=9.81 m s⁻² \n    |-- CreepLaws         : Powerlaw viscosity: η0=1.0e18 Pa s, n=5, ε0=1.0e-15 s⁻¹  \n    |                       Linear viscosity: η=1.0e21 Pa s \n\n\n\n\n\n","category":"function"},{"location":"man/materialparameters/#GeoParams.MaterialParameters.MaterialParams","page":"Material Parameters","title":"GeoParams.MaterialParameters.MaterialParams","text":"MaterialParams\n\nStructure that holds all material parameters for a given phase\n\n\n\n\n\n","category":"type"},{"location":"man/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This page details the some of the guidelines that should be followed when contributing to this package.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"You can contribute for example by adding new creep laws or by adding new constitutive relationships. If you invest a bit of time now, it will save others in the community a lot of time! The simplest way to do this is by cloning the repository, and creating a new branch for your feature. Once you are happy with what you added (and after you added a test to ensure that it will keep working with future changes), create a pull request and we will evaluate & merge it.","category":"page"},{"location":"man/contributing/#Style-Guide","page":"Contributing","title":"Style Guide","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Follow the style of the surrounding text when making changes. When adding new features please try to stick to the following points whenever applicable.","category":"page"},{"location":"man/contributing/#Julia","page":"Contributing","title":"Julia","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"4-space indentation;\nmodules spanning entire files should not be indented, but modules that have surrounding code should;\nno blank lines at the start or end of files;\ndo not manually align syntax such as = or :: over adjacent lines;\nuse function ... end when a method definition contains more than one toplevel expression;\nrelated short-form method definitions don't need a new line between them;\nunrelated or long-form method definitions must have a blank line separating each one;\nsurround all binary operators with whitespace except for ::, ^, and :;\nfiles containing a single module ... end must be named after the module;\nmethod arguments should be ordered based on the amount of usage within the method body;\nmethods extended from other modules must follow their inherited argument order, not the above rule;\nexplicit return should be preferred except in short-form method definitions;\navoid dense expressions where possible e.g. prefer nested ifs over complex nested ?s;\ninclude a trailing , in vectors, tuples, or method calls that span several lines;\ndo not use multiline comments (#= and =#);\nwrap long lines as near to 92 characters as possible, this includes docstrings;\nfollow the standard naming conventions used in Base.","category":"page"},{"location":"man/contributing/#Markdown","page":"Contributing","title":"Markdown","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Use unbalanced # headers, i.e. no # on the right hand side of the header text;\ninclude a single blank line between toplevel blocks;\nunordered lists must use * bullets with two preceding spaces;\ndo not hard wrap lines;\nuse emphasis (*) and bold (**) sparingly;\nalways use fenced code blocks instead of indented blocks;\nfollow the conventions outlined in the Julia documentation page on documentation.","category":"page"},{"location":"man/latentheat/#Latent-heat","page":"Latent heat","title":"Latent heat","text":"","category":"section"},{"location":"man/latentheat/#Methods","page":"Latent heat","title":"Methods","text":"","category":"section"},{"location":"man/latentheat/","page":"Latent heat","title":"Latent heat","text":"Latent heat (of crystallisation) is defined as ","category":"page"},{"location":"man/latentheat/","page":"Latent heat","title":"Latent heat","text":"GeoParams.MaterialParameters.LatentHeat.ConstantLatentHeat","category":"page"},{"location":"man/latentheat/#GeoParams.MaterialParameters.LatentHeat.ConstantLatentHeat","page":"Latent heat","title":"GeoParams.MaterialParameters.LatentHeat.ConstantLatentHeat","text":"ConstantLatentHeat(Q_L=400kJ/kg)\n\nSet a constant latent heat:\n\n    Q_L  = cst\n\nwhere Q_L is the latent heat [kJkg].\n\n\n\n\n\n","category":"type"},{"location":"man/latentheat/#Computational-routines","page":"Latent heat","title":"Computational routines","text":"","category":"section"},{"location":"man/latentheat/","page":"Latent heat","title":"Latent heat","text":"To compute, use this:","category":"page"},{"location":"man/latentheat/","page":"Latent heat","title":"Latent heat","text":"GeoParams.MaterialParameters.LatentHeat.compute_latent_heat","category":"page"},{"location":"man/zirconages/#Zircon-age-parameterizations","page":"Zircon Ages","title":"Zircon age parameterizations","text":"","category":"section"},{"location":"man/zirconages/#Methods","page":"Zircon Ages","title":"Methods","text":"","category":"section"},{"location":"man/zirconages/","page":"Zircon Ages","title":"Zircon Ages","text":"Zircons are one of the ways in which we can date the age & activity of magmatic systems.  Here, we provide a computational routine that computes the zircon age distribution from temperature-time paths","category":"page"},{"location":"man/zirconages/","page":"Zircon Ages","title":"Zircon Ages","text":"GeoParams.ZirconAgeData","category":"page"},{"location":"man/zirconages/#GeoParams.ZirconAges.ZirconAgeData","page":"Zircon Ages","title":"GeoParams.ZirconAges.ZirconAgeData","text":"ZirconAgeData\n\nStruct that holds default parameters for the calculations\n\n\n\n\n\n","category":"type"},{"location":"man/zirconages/#Computational-routines","page":"Zircon Ages","title":"Computational routines","text":"","category":"section"},{"location":"man/zirconages/","page":"Zircon Ages","title":"Zircon Ages","text":"There is one main routine with which you can compute zircon age probability density functions from a range of temperature-ime paths:","category":"page"},{"location":"man/zirconages/","page":"Zircon Ages","title":"Zircon Ages","text":"GeoParams.compute_zircon_age_PDF","category":"page"},{"location":"man/zirconages/#GeoParams.ZirconAges.compute_zircon_age_PDF","page":"Zircon Ages","title":"GeoParams.ZirconAges.compute_zircon_age_PDF","text":"time_Ma, PDF_zircons, time_Ma_average, PDF_zircon_average, time_years, prob, ages_eruptible, number_zircons, T_av_time, T_sd_time, cumPDF = compute_zircon_age_PDF(time_years_vecs::Vector{Vector}, Tt_paths_Temp_vecs::Vector{Vector}; ZirconData::ZirconAgeData = ZirconAgeData(), bandwidth=bandwidth, n_analyses=300)\n\nThis computes the PDF (probability density function) with zircon age data from Vectors with Tt-paths\t\n\n\n\n\n\n","category":"function"},{"location":"man/zirconages/","page":"Zircon Ages","title":"Zircon Ages","text":"This, in turn, calls two other routines:","category":"page"},{"location":"man/zirconages/","page":"Zircon Ages","title":"Zircon Ages","text":"GeoParams.compute_zircons_Ttpath\nGeoParams.zircon_age_PDF","category":"page"},{"location":"man/zirconages/#GeoParams.ZirconAges.compute_zircons_Ttpath","page":"Zircon Ages","title":"GeoParams.ZirconAges.compute_zircons_Ttpath","text":"prob, ages_eruptible, number_zircons, T_av_time, T_sd_time, cumPDF =  compute_zircons_Ttpath(time_years::AbstractArray{Float64,1}, Tt_paths_Temp::AbstractArray{Float64,2}; ZirconData::ZirconAgeData)\n\nThis computes the number of zircons produced from a series of temperature-time path's.  The Tt-paths are stored in a 2D matrix Tt_paths_Temp with rows being the temperature at time time_years.\n\nInput:\n\ntime_years : vector of length nt with the time in years (since the beginning of the simulation) of the points provided\nTt_paths_Temp : array of size (nt,npaths)` with the temperature of every path.\n\nOutput:\n\nprob : a vector that gives the relative probability that a zircon with a given age exists\nages_eruptible : age of eruptble magma\nnumber_zircons : 1D array of size (nt,)\nT_av_time: vector of size nt that contains the average T of the paths\nT_sd_time: vector of size nt that contains the standard deviation of the T of the paths\ncumPDF: vector of size nt that contains the cummulative probability density function that we have an age of less than a certain one in the samples\n\nThis routine was developed based on an R-routine provided as electronic supplement in the paper:\n\nWeber, G., Caricchi, L., Arce, J.L., Schmitt, A.K., 2020. Determining the current size and state of subvolcanic magma reservoirs. Nat Commun 11, 5477. https://doi.org/10.1038/s41467-020-19084-2\n\n\n\n\n\ntime_years, prob, ages_eruptible, number_zircons, T_av_time, T_sd_time, cumPDF  = compute_zircons_Ttpath(time_years_vecs::Vector{Vector{Float64}}, Tt_paths_Temp::Vector{Vector{Float64}}; ZirconData::ZirconAgeData = ZirconAgeData())\n\nThis accepts Vector{Vector} as input for time and temperature of each Tt-path. Here, the length of the vector can be variable between different points.\n\nInternally, we interpolate this into a 2D matrix and a longer vector that includes all paths and a single vector with times \n\n\n\n\n\n","category":"function"},{"location":"man/zirconages/#GeoParams.ZirconAges.zircon_age_PDF","page":"Zircon Ages","title":"GeoParams.ZirconAges.zircon_age_PDF","text":"zircon_age_PDF(ages_eruptible::AbstractArray{Float64,1}, number_zircons::AbstractArray{Float64,2}, bandwidth=1e5, n_analyses=300, ZirconData::ZirconAgeData)\n\nCompute probability density functions for zircon age path's describes in number_zircons with age ages_eruptible (both computed ). bandwidth is the smoothening window of the resulting curves (in years), whereas n_analyses are the number of analyses done. \t\n\n\n\n\n\n","category":"function"},{"location":"man/zirconages/","page":"Zircon Ages","title":"Zircon Ages","text":"We also provide a plotting routine, provided the Plots package is loaded, which produces figures such as: (Image: subet3)","category":"page"},{"location":"man/TASclassification/#TAS-rock-classification","page":"TAS classification","title":"TAS rock classification","text":"","category":"section"},{"location":"man/TASclassification/#Methods","page":"TAS classification","title":"Methods","text":"","category":"section"},{"location":"man/TASclassification/","page":"TAS classification","title":"TAS classification","text":"When doing coupled petrological-geodynamic modelling, the evolution of the composition of the magma is more easily understood when a rock type is given. This routine is an implementation of the TAS diagram (Total Alkali (TA) vs Silica (S)) from Le Maitre et al., 2002.","category":"page"},{"location":"man/TASclassification/","page":"TAS classification","title":"TAS classification","text":"GeoParams.TASclassificationData","category":"page"},{"location":"man/TASclassification/#GeoParams.TASclassification.TASclassificationData","page":"TAS classification","title":"GeoParams.TASclassification.TASclassificationData","text":"TASclassificationData\n\nStruct that holds default parameters for the TAS diagram\n\n\n\n\n\n","category":"type"},{"location":"man/TASclassification/#Computational-routine","page":"TAS classification","title":"Computational routine","text":"","category":"section"},{"location":"man/TASclassification/","page":"TAS classification","title":"TAS classification","text":"There is one routine with which you can retrieve the index of the TAS rock-type. The routine receives as an input a compositional vector [SiO2,Na2O+K2O] in wt% and sends back an index [1-15].","category":"page"},{"location":"man/TASclassification/","page":"TAS classification","title":"TAS classification","text":"GeoParams.computeTASclassification","category":"page"},{"location":"man/TASclassification/#GeoParams.TASclassification.computeTASclassification","page":"TAS classification","title":"GeoParams.TASclassification.computeTASclassification","text":"classIndex computeTASclassification(chemComp::AbstractArray{_T,N}, ClassTASdata::TASclassificationData)\n\nThis compute the classification of the igneous rock using TAS diagram (Total Alkali (TA) vs Silica (S)).\n\nInput:\n\nchemComp : vector rock composition in oxide wt%\n\nOutput:\n\nclassIndex : an integer [0-14] corresponding to a TAS field (TASclassificationData.litho[classIndex])\n\nThis routine was developed based the TAS classification of Le Maitre et al., 2002\n\n\n\n\n\n","category":"function"},{"location":"man/TASclassification/","page":"TAS classification","title":"TAS classification","text":"Using the index of the rock-type you can get the name of the corresponding volcanic rock using the following routine.","category":"page"},{"location":"man/TASclassification/","page":"TAS classification","title":"TAS classification","text":"GeoParams.retrieveTASrockType","category":"page"},{"location":"man/TASclassification/#GeoParams.TASclassification.retrieveTASrockType","page":"TAS classification","title":"GeoParams.TASclassification.retrieveTASrockType","text":"retrieveTASrockType(index::Int64; ClassTASdata::TASclassificationData = TASclassificationData())\n\nThis retrieves the name of the volcanic rock-type using the computed index\n\nInput:\n\nindex : integer [1-15]\n\nOutput:\n\nlitho : a string of the name of corresponding volcanic rock\n\n\n\n\n\n","category":"function"},{"location":"man/TASclassification/","page":"TAS classification","title":"TAS classification","text":"We also provide a plotting routine, provided the Plots package is loaded, which produces figures such as: (Image: subet3)","category":"page"},{"location":"man/radioactiveheating/#Radioactive-heat","page":"Radioactive heat","title":"Radioactive heat","text":"","category":"section"},{"location":"man/radioactiveheating/#Methods","page":"Radioactive heat","title":"Methods","text":"","category":"section"},{"location":"man/radioactiveheating/","page":"Radioactive heat","title":"Radioactive heat","text":"Radioactive heat sources are defined as ","category":"page"},{"location":"man/radioactiveheating/","page":"Radioactive heat","title":"Radioactive heat","text":"GeoParams.MaterialParameters.RadioactiveHeat.ConstantRadioactiveHeat\nGeoParams.MaterialParameters.RadioactiveHeat.ExpDepthDependentRadioactiveHeat\n","category":"page"},{"location":"man/radioactiveheating/#GeoParams.MaterialParameters.RadioactiveHeat.ConstantRadioactiveHeat","page":"Radioactive heat","title":"GeoParams.MaterialParameters.RadioactiveHeat.ConstantRadioactiveHeat","text":"ConstantRadioactiveHeat(H_r=1e-6Watt/m^3)\n\nSet a constant radioactive heat:\n\n    H_r  = cst\n\nwhere H_r is the radioactive heat source [Wattm^3].\n\n\n\n\n\n","category":"type"},{"location":"man/radioactiveheating/#GeoParams.MaterialParameters.RadioactiveHeat.ExpDepthDependentRadioactiveHeat","page":"Radioactive heat","title":"GeoParams.MaterialParameters.RadioactiveHeat.ExpDepthDependentRadioactiveHeat","text":"ExpDepthDependent(H_0=1e-6Watt/m^3, h_r=10e3m, z_0=0m)\n\nSets an exponential depth-dependent radioactive \n\n    H_r  = H_0 exp left( - (z - z_0) over h_r right)\n\nwhere H_0 is the radioactive heat source [Wattm^3] at z=z_0 which decays with depth over a characteristic distance h_r.\n\n\n\n\n\n","category":"type"},{"location":"man/radioactiveheating/#Computational-routines","page":"Radioactive heat","title":"Computational routines","text":"","category":"section"},{"location":"man/radioactiveheating/","page":"Radioactive heat","title":"Radioactive heat","text":"To compute, use this:","category":"page"},{"location":"man/radioactiveheating/","page":"Radioactive heat","title":"Radioactive heat","text":"GeoParams.MaterialParameters.RadioactiveHeat.compute_radioactive_heat\nGeoParams.MaterialParameters.RadioactiveHeat.compute_radioactive_heat!","category":"page"},{"location":"man/listfunctions/#List-of-all-functions","page":"List of functions","title":"List of all functions","text":"","category":"section"},{"location":"man/listfunctions/","page":"List of functions","title":"List of functions","text":"This page details the some of the guidelines that should be followed when contributing to this package.","category":"page"},{"location":"man/listfunctions/","page":"List of functions","title":"List of functions","text":"","category":"page"},{"location":"man/seismicvelocity/#Seismic-velocity","page":"Seismic Velocity","title":"Seismic velocity","text":"","category":"section"},{"location":"man/seismicvelocity/#Methods","page":"Seismic Velocity","title":"Methods","text":"","category":"section"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"Seismic velocity can specified in a number of ways","category":"page"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"GeoParams.MaterialParameters.SeismicVelocity.ConstantSeismicVelocity","category":"page"},{"location":"man/seismicvelocity/#GeoParams.MaterialParameters.SeismicVelocity.ConstantSeismicVelocity","page":"Seismic Velocity","title":"GeoParams.MaterialParameters.SeismicVelocity.ConstantSeismicVelocity","text":"ConstantSeismicVelocity(Vp=8.1 km/s, Vs=4.5km/s)\n\nSet a constant seismic P and S-wave velocity:\n\n    V_p = cst\n\n    V_s = cst\n\nwhere V_p V_s are the P-wave and S-wave velocities [kms].\n\n\n\n\n\n","category":"type"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"In addition, you can use phase diagram lookup tables to compute seismic velocities as a function of pressure and temperature.","category":"page"},{"location":"man/seismicvelocity/#Computational-routines","page":"Seismic Velocity","title":"Computational routines","text":"","category":"section"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"To evaluate seismic velocity within a user routine, use this:","category":"page"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"GeoParams.compute_swave_velocity!\nGeoParams.compute_pwave_velocity!\nGeoParams.compute_pwave_velocity\nGeoParams.compute_swave_velocity","category":"page"},{"location":"man/seismicvelocity/#Seismic-velocity-correction-for-partial-melt","page":"Seismic Velocity","title":"Seismic velocity correction for partial melt","text":"","category":"section"},{"location":"man/seismicvelocity/#Methods-2","page":"Seismic Velocity","title":"Methods","text":"","category":"section"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"The routine uses the reduction formulation of Clark et al., (2017) and is based on the equilibrium geometry model for the solid skeleton of Takei et al., 1998.","category":"page"},{"location":"man/seismicvelocity/#Computational-routines-2","page":"Seismic Velocity","title":"Computational routines","text":"","category":"section"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"To compute melt-content based correction for seismic waves velocities, you can use:","category":"page"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"GeoParams.melt_correction","category":"page"},{"location":"man/seismicvelocity/#Seismic-S-wave-velocity-correction-for-(shallow-depth)-porosity","page":"Seismic Velocity","title":"Seismic S-wave velocity correction for (shallow depth) porosity","text":"","category":"section"},{"location":"man/seismicvelocity/#Methods-3","page":"Seismic Velocity","title":"Methods","text":"","category":"section"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"Ths routine is based on the equilibrium geometry model for the solid skeleton of Takei et al. (1998) and the porosity-depth empirical relationship of Chen et al. (2020)","category":"page"},{"location":"man/seismicvelocity/#Computational-routines-3","page":"Seismic Velocity","title":"Computational routines","text":"","category":"section"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"To compute porosity based correction for seismic S-wave velocity, you can use:","category":"page"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"GeoParams.porosity_correction","category":"page"},{"location":"man/seismicvelocity/#Seismic-velocity-correction-for-anelasticity","page":"Seismic Velocity","title":"Seismic velocity correction for anelasticity","text":"","category":"section"},{"location":"man/seismicvelocity/#Methods-4","page":"Seismic Velocity","title":"Methods","text":"","category":"section"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"The routine uses the reduction formulation of karato (1993), using the quality factor formulation from Behn et al. (2009)","category":"page"},{"location":"man/seismicvelocity/#Computational-routines-4","page":"Seismic Velocity","title":"Computational routines","text":"","category":"section"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"To compute a correction of S-wave velocity for anelasticity, use this:","category":"page"},{"location":"man/seismicvelocity/","page":"Seismic Velocity","title":"Seismic Velocity","text":"GeoParams.anelastic_correction","category":"page"},{"location":"man/seismicvelocity/#GeoParams.MaterialParameters.SeismicVelocity.anelastic_correction","page":"Seismic Velocity","title":"GeoParams.MaterialParameters.SeismicVelocity.anelastic_correction","text":"    Vs_anel = anelastic_correction(water::Int64, Vs0::Float64,P::Float64,T::Float64)\n\nThis routine computes a correction of S-wave velocity for anelasticity\n\nInput:\n\nwater: water flag, 0 = dry; 1 = dampened; 2 = water saturated \nVs0  : S-wave velocitiy of the solid phase (with or without melt correction)\nP    : pressure given in Pa\nT    : temperature given in °K\n\nOutput:\n\nVs_anel : corrected S-wave velocity for anelasticity\n\nThe routine uses the reduction formulation of Karato (1993), using the quality factor formulation from Behn et al. (2009)\n\nReferences:\n\nKarato, S. I. (1993). Importance of anelasticity in the interpretation of seismic tomography. Geophysical research letters, 20(15), 1623-1626.\nBehn, M. D., Hirth, G., & Elsenbeck II, J. R. (2009). Implications of grain size evolution on the seismic structure of the oceanic upper mantle. Earth and Planetary Science Letters, 282(1-4), 178-189.\n\n\n\n\n\n","category":"function"},{"location":"man/plasticity/#Plasticity","page":"Plasticity","title":"Plasticity","text":"","category":"section"},{"location":"man/plasticity/","page":"Plasticity","title":"Plasticity","text":"Plasticity is a non;linear rheology bthat is actrivated once stresses exceed a certain yield criteria.","category":"page"},{"location":"man/plasticity/#Implemented-laws","page":"Plasticity","title":"Implemented  laws","text":"","category":"section"},{"location":"man/plasticity/","page":"Plasticity","title":"Plasticity","text":"The following plastic law are implemented:","category":"page"},{"location":"man/plasticity/","page":"Plasticity","title":"Plasticity","text":"GeoParams.MaterialParameters.Plasticity.DruckerPrager","category":"page"},{"location":"man/plasticity/#Computational-routines","page":"Plasticity","title":"Computational routines","text":"","category":"section"},{"location":"man/plasticity/","page":"Plasticity","title":"Plasticity","text":"Once a plastic rheology is defined, we can use the following routines to perform computations within the solvers","category":"page"},{"location":"man/plasticity/","page":"Plasticity","title":"Plasticity","text":"GeoParams.MaterialParameters.Plasticity.compute_yieldfunction\nGeoParams.MaterialParameters.Plasticity.compute_yieldfunction!","category":"page"},{"location":"man/plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"man/plotting/","page":"Plotting","title":"Plotting","text":"We provide a number of plotting routines. Note that these plotting routines only become available once the Plots package is loaded.","category":"page"},{"location":"man/plotting/#Plot-CreepLaws","page":"Plotting","title":"Plot CreepLaws","text":"","category":"section"},{"location":"man/plotting/","page":"Plotting","title":"Plotting","text":"GeoParams.PlotStressStrainrate_CreepLaw\nGeoParams.PlotHeatCapacity\nGeoParams.PlotConductivity\nGeoParams.PlotMeltFraction\nGeoParams.PlotPhaseDiagram","category":"page"},{"location":"man/geounit/#GeoUnit","page":"GeoUnit","title":"GeoUnit","text":"","category":"section"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"Most parameters have physical units (100km, 9.81 ms⁻²). Yet, within numerical solvers it is usually not a good idea to compute with the actual SI units as they (at least in geosciences) tend to result in very large/small numbers, which can cause in roundoff errors.  Therefore, we usually convert the dimensional units into non-dimensional ones befeore starting computations. The results can than be converted back to more convenient units for us when we generate the output (plots, for example).","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"This requires a wauy to store the dimensions of a parameter, but also, once they are made nondimensional, the original units (otherwise we can't convert them back to dimensional values).","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"For that reason, we use the GeoUnit structure, defined as ","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"struct GeoUnit{T,U}\n    val          :: T\n    unit         :: U\n    isdimensional:: Bool\nend","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"You can define a GeoUnit as:","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> a = GeoUnit(100km)\nGeoUnit{dimensional, km}, \n100.0\njulia> b=GeoUnit(100s)\nGeoUnit{dimensional, s}, \n100.0","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"Dividing the two gives the expected result","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> c=a/b\nGeoUnit{dimensional, km s⁻¹·⁰}, \n1.0","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"Can also be a vector:","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> T = GeoUnit(100K:10.0K:1000K)\nGeoUnit{dimensional, K}, \n100.0:10.0:1000.0","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"The numerical value is obtained with:","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> NumValue(c)\n1.0","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"It's unit with","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> Unit(c)\nkm s⁻¹·⁰","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"and the value with unit with","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> Value(c)\n1.0 km s⁻¹·⁰","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"If you multiply or divide a GeoUnit with a normal number, we assume that you are no longer interested in the units and you'll get a Float64:","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> c*100\n100.0","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"The value of the GeoUnit struct becomes clear once we non-dimensionalize it (as explained in more detail in a separate page). For that, first specify which characteristic values you want to use for non-dimensionalisation: ","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> CharDim = GEO_units(length=1000km, temperature=1000C, stress=10MPa, viscosity=1e20Pas);","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"Let's define a stress:","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> σ=GeoUnit(10MPa)\nGeoUnit{dimensional, MPa}, \n10.0","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"And transfer it to nondimensional units:","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> σ_nd = nondimensionalize(σ,CharDim)\nGeoUnit{nondimensional, MPa}, \n0.9999999999999998","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"Instead of 1e7 Pa, we now have 1.0; yet at the same time we know that the original unit of σ_nd was in MPa, which allows to transfer it back to dimensional units:","category":"page"},{"location":"man/geounit/","page":"GeoUnit","title":"GeoUnit","text":"julia> dimensionalize(σ_nd,CharDim)\nGeoUnit{dimensional, MPa}, \n10.0","category":"page"},{"location":"man/creeplaws/#CreepLaws","page":"Creep laws","title":"CreepLaws","text":"","category":"section"},{"location":"man/creeplaws/#Implemented-creep-laws","page":"Creep laws","title":"Implemented creep laws","text":"","category":"section"},{"location":"man/creeplaws/","page":"Creep laws","title":"Creep laws","text":"The following viscous creep laws are implemented:","category":"page"},{"location":"man/creeplaws/","page":"Creep laws","title":"Creep laws","text":"GeoParams.LinearViscous\nGeoParams.PowerlawViscous\nGeoParams.DislocationCreep\nGeoParams.SetDislocationCreep\nGeoParams.MaterialParameters.ConstitutiveRelationships.DiffusionCreep\nGeoParams.MaterialParameters.ConstitutiveRelationships.SetDiffusionCreep","category":"page"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.LinearViscous","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.LinearViscous","text":"LinearViscous(η=1e20Pa*s)\n\nDefines a linear viscous creeplaw \n\nThe (isotopic) linear viscous rheology is given by  \n\n    tau_ij = 2 eta dotvarepsilon_ij \n\nor\n\n    dotvarepsilon_ij  = tau_ij  over 2 eta \n\nwhere eta_0 is the reference viscosity [Pa*s] at reference strain rate dotvarepsilon_0[1/s], and n the power law exponent []. \n\n\n\n\n\n","category":"type"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.PowerlawViscous","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.PowerlawViscous","text":"PowerlawViscous(η0=1e18Pa*s, n=2.0NoUnits, ε0=1e-15/s)\n\nDefines a power law viscous creeplaw as: \n\n    tau_ij^n  = 2 eta_0 left( dotvarepsilon_ij over dotvarepsilon_0 right)\n\nwhere eta is the effective viscosity [Pa*s].\n\n\n\n\n\n","category":"type"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.DislocationCreep","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.DislocationCreep","text":"DislocationCreep(n = 1.0NoUnits, r = 0.0NoUnits, A = 1.5MPa/s, E = 476.0kJ/mol, V = 6e-6m^3/mol, apparatus = AxialCompression )\n\nDefines the flow law parameter of a dislocation creep law.\n\nThe (isotropic) dislocation creep law, as used by experimentalists, is given by  \n\n     dotgamma = A sigma_mathrmd^n f_mathrmH2O^r expleft(-fracE+PVRTright)\n\nwhere \n\nn is the power law exponent  \nr is the exponent of fugacity dependence \nA is a pre-exponential factor mathrmMPa^-ns^-1 (if manually defined, n and r must be either pre-defined or substituted) \nE is the activation energy mathrmkJmol \nV is the activation volume mathrmm^3mol \ndotgamma is the strain rate mathrm1s \nsigma_mathrmd is the differential stress mathrmMPa which are converted into second invariants using the Apparatus variable that can be\n\neither AxialCompression, SimpleShear or Invariant. If the flow law paramters are already given as a function of second invariants, choose Apparatus=Invariant.\n\nExample\n\njulia> x2 = DislocationCreep(n=3)\nDislocationCreep: n=3, r=0.0, A=1.5 MPa^-3 s^-1, E=476.0 kJ mol^-1, V=6.0e-6 m^3 mol^-1, Apparatus=AxialCompression\n\n\n\n\n\n","category":"type"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.SetDislocationCreep","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.SetDislocationCreep","text":"SetDislocationCreep[\"Name of Dislocation Creep\"]\n\nSets predefined dislocation creep data from a dictionary\n\n\n\n\n\n","category":"function"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.DiffusionCreep","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.DiffusionCreep","text":"DiffusionCreep(r = 0NoUnits, p = A = 1.5MPa/s, E = 476.0kJ/mol, V = 6e-6m^3/mol, apparatus = AxialCompression )\n\nDefines the flow law parameter of a dislocation creep law.\n\nThe (isotropic) diffusion creep law, as used by experimentalists, is given by  \n\n     dotgamma = A sigma_mathrmd d^mathrmp f_mathrmH2O^r expleft(-fracE+PVRTright)\n\nwhere \n\nr is the exponent of fugacity dependence \np is the exponent of grain size\nA is a pre-exponential factor mathrmMPa^-ns^-1 (if manually defined, n and r must be either pre-defined or substituted) \nE is the activation energy mathrmkJmol \nV is the activation volume mathrmm^3mol \ndotgamma is the strain rate mathrm1s \nsigma_mathrmd is the differential stress mathrmMPa\n\nThe experimental paramaters are converted into second invariants using the Apparatus variable that can be either AxialCompression, SimpleShear or Invariant. If the flow law paramters are already given as a function of second invariants, choose Apparatus=Invariant.\n\nExample\n\njulia> x2 = DiffusionCreep(Name=\"test\")\nDiffusionCreep: Name = test, n=1.0, r=0.0, p=-3.0, A=1.5 m³·⁰ MPa⁻¹·⁰ s⁻¹·⁰, E=500.0 kJ mol⁻¹·⁰, V=2.4e-5 m³·⁰ mol⁻¹·⁰, FT=1.7320508075688772, FE=1.1547005383792517)\n\n\n\n\n\n","category":"type"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.SetDiffusionCreep","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.SetDiffusionCreep","text":"SetDiffusionCreep[\"Name of Diffusion Creep\"]\n\nThis is a dictionary with pre-defined creep laws    \n\n\n\n\n\n","category":"function"},{"location":"man/creeplaws/#Computational-routines-for-creep-laws","page":"Creep laws","title":"Computational routines for creep laws","text":"","category":"section"},{"location":"man/creeplaws/","page":"Creep laws","title":"Creep laws","text":"Once a creep rheology is defined, we can use the following routines to perform computations within the solvers","category":"page"},{"location":"man/creeplaws/","page":"Creep laws","title":"Creep laws","text":"CreepLawVariables\nGeoParams.compute_εII\nGeoParams.compute_εII!\nGeoParams.compute_τII\nGeoParams.compute_τII!\nGeoParams.CorrectionFactor\nGeoParams.RemoveTensorCorrection","category":"page"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.compute_εII","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.compute_εII","text":"compute_εII(a::DiffusionCreep, TauII::_T; T::_T, P=one(_T), f=one(_T), d=one(_T), kwargs...)\n\nReturns diffusion creep strainrate as a function of 2nd invariant of the stress tensor tau_II \n\n    dotε_II = A τ_II^n d^p f_H_2O^r exp left(- E + PV over RT right)\n\n\n\n\n\ncompute_εII(s::ConstantElasticity{_T}, τII; τII_old, dt)\n\nComputes elastic strainrate given the deviatoric stress at the current (τII) and old timestep (τII_old), for a timestep dt:\n\n    dotvarepsilon^el = 1 over 2 G D tau_II over Dt   1 over 2 G tau_II- tildetau_II^old over dt \n\nNote that we here solve the scalar equation, which is sufficient for isotropic cases. In tensor form, it would be\n\n    dotvarepsilon^el_ij = 1 over 2 G  tau_ij - tildetau_ij^old over dt \n\nhere tildetau_ij^old is the rotated old deviatoric stress tensor to ensure objectivity (this can be done with Jaumann derivative, or also by using the full rotational formula).\n\n\n\n\n\ncompute_εII(v::Parallel{T,N}, τII, args; tol=1e-6, verbose=false, n=1)\n\nComputing εII as a function of τII for a Parallel elements is (usually) a nonlinear problem\n\n\n\n\n\ncompute_εII(v::CompositeRheology{T,N}, τII, args; tol=1e-6, verbose=false, n=1)\n\nComputing εII as a function of τII for a composite element is the sum of the individual contributions\n\n\n\n\n\n","category":"function"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.compute_εII!","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.compute_εII!","text":"compute_εII!(EpsII::AbstractArray{_T,N}, a, TauII::AbstractArray{_T,N}; T, P, f,d,kwargs...)\n\nComputes strainrate as a function of stress\n\n\n\n\n\ncompute_εII!(EpsII::AbstractArray{_T,N}, s::LinearViscous, TauII::AbstractArray{_T,N})\n\n\n\n\n\ncompute_εII!(ε_el::AbstractArray{_T,N}, s::ConstantElasticity{_T}; τII::AbstractArray{_T,N}, τII_old::AbstractArray{_T,N}, dt::_T, kwargs...)\n\nIn-place computation of the elastic shear strainrate for given deviatoric stress invariants at the previous (τII_old) and new (τII) timestep, as well as the timestep dt  \n\n    dotvarepsilon^el = 1 over 2 G D tau_II over Dt   1 over 2 G tau_II- tau_II^old over dt \n\n\n\n\n\n","category":"function"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.compute_τII","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.compute_τII","text":"compute_τII(a::DislocationCreep, EpsII; P, T, f, args...)\n\nComputes the stress for a Dislocation creep law given a certain strain rate\n\n\n\n\n\ncomputeCreepLaw_TauII(EpsII::_T, a::DiffusionCreep; T::_T, P=zero(_T), f=one(_T), d=one(_T), kwargs...)\n\nReturns diffusion creep stress as a function of 2nd invariant of the strain rate \n\n\n\n\n\ncompute_τII(s::LinearViscous, EpsII; kwargs...)\n\nReturns second invariant of the stress tensor given a 2nd invariant of strain rate tensor \n\n\n\n\n\nτII = compute_τII(v::CompositeRheology{T,N}, εII, args; tol=1e-6, verbose=false)\n\n\n\n\n\n","category":"function"},{"location":"man/creeplaws/#GeoParams.MaterialParameters.ConstitutiveRelationships.compute_τII!","page":"Creep laws","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.compute_τII!","text":"compute_τII!(TauII::AbstractArray{_T,N}, a::DislocationCreep, EpsII::AbstractArray{_T,N}; \n    P =       zero(TauII)::AbstractArray{_T,N}, \n    T = ones(size(TauII))::AbstractArray{_T,N}, \n    f = ones(size(TauII))::AbstractArray{_T,N})\n\nComputes the deviatoric stress invariant for a dislocation creep law\n\n\n\n\n\ncompute_τII!(τII::AbstractArray{_T,N}, s::ConstantElasticity{_T}. ε_el::AbstractArray{_T,N}; τII_old::AbstractArray{_T,N}, dt::_T, kwargs...)\n\nIn-place update of the elastic stress for given deviatoric strainrate invariants and stres invariant at the old (τII_old) timestep, as well as the timestep dt  \n\n    tau_II = 2 G dt dotvarepsilon^el + tau_II^old\n\n\n\n\n\n","category":"function"},{"location":"man/heatcapacity/#Heat-capacity","page":"Heat Capacity","title":"Heat capacity","text":"","category":"section"},{"location":"man/heatcapacity/#Methods","page":"Heat Capacity","title":"Methods","text":"","category":"section"},{"location":"man/heatcapacity/","page":"Heat Capacity","title":"Heat Capacity","text":"Heat capacity is defined as ","category":"page"},{"location":"man/heatcapacity/","page":"Heat Capacity","title":"Heat Capacity","text":"GeoParams.MaterialParameters.HeatCapacity.ConstantHeatCapacity\nGeoParams.MaterialParameters.HeatCapacity.T_HeatCapacity_Whittington","category":"page"},{"location":"man/heatcapacity/#GeoParams.MaterialParameters.HeatCapacity.ConstantHeatCapacity","page":"Heat Capacity","title":"GeoParams.MaterialParameters.HeatCapacity.ConstantHeatCapacity","text":"ConstantHeatCapacity(cp=1050J/mol/kg)\n\nSet a constant heat capacity:\n\n    cp  = cst\n\nwhere cp is the thermal heat capacity [JkgK].\n\n\n\n\n\n","category":"type"},{"location":"man/heatcapacity/#GeoParams.MaterialParameters.HeatCapacity.T_HeatCapacity_Whittington","page":"Heat Capacity","title":"GeoParams.MaterialParameters.HeatCapacity.T_HeatCapacity_Whittington","text":"T_HeatCapacity_Whittington()\n\nSets a temperature-dependent heat capacity following the parameterization of Whittington et al. (2009), Nature:\n\n    Cp = (a + b T - cT^2)m \n\nwhere Cp is the heat capacity [JkgK], and abc are parameters that dependent on the temperature T:\n\na = 199.50 J/mol/K    if T<= 846 K\na = 199.50 J/mol/K    if T> 846 K\nb = 0.0857J/mol/K^2   if T<= 846 K\nb = 0.0323J/mol/K^2   if T> 846 K\nc = 5e6J/mol*K        if T<= 846 K\nc = 47.9e-6J/mol*K    if T> 846 K\nmolmass =   0.22178kg/mol \n\nNote that this is slightly different than the equation in the manuscript, as Cp is in J/kg/K (rather than JmolK as in eq.3/4 of the paper)\n\n\n\n\n\n","category":"type"},{"location":"man/heatcapacity/#Computational-routines","page":"Heat Capacity","title":"Computational routines","text":"","category":"section"},{"location":"man/heatcapacity/","page":"Heat Capacity","title":"Heat Capacity","text":"To compute, use this:","category":"page"},{"location":"man/heatcapacity/","page":"Heat Capacity","title":"Heat Capacity","text":"GeoParams.MaterialParameters.HeatCapacity.compute_heatcapacity\nGeoParams.MaterialParameters.HeatCapacity.compute_heatcapacity!","category":"page"},{"location":"man/heatcapacity/#GeoParams.MaterialParameters.HeatCapacity.compute_heatcapacity","page":"Heat Capacity","title":"GeoParams.MaterialParameters.HeatCapacity.compute_heatcapacity","text":"Cp = compute_heatcapacity(s:<AbstractHeatCapacity, P, T)\n\nReturns the heat capacity Cp at any temperature T and pressure P using any of the heat capacity laws implemented.\n\nCurrently available:\n\nConstantHeatCapacity\nT_HeatCapacity_Whittington\n\nExample\n\nUsing dimensional units\n\njulia> T  = (250:100:1250)*K;\njulia> cp = T_HeatCapacity_Whittington()\njulia> Cp = ComputeHeatCapacity(0,T,cp)\n11-element Vector{Unitful.Quantity{Float64, 𝐋² 𝚯⁻¹ 𝐓⁻², Unitful.FreeUnits{(kg⁻¹, J, K⁻¹), 𝐋² 𝚯⁻¹ 𝐓⁻², nothing}}}:\n  635.4269997294616 J kg⁻¹ K⁻¹\n  850.7470171764261 J kg⁻¹ K⁻¹\n  962.0959598489883 J kg⁻¹ K⁻¹\n 1037.5420433770641 J kg⁻¹ K⁻¹\n 1097.3517921966488 J kg⁻¹ K⁻¹\n 1149.2745563671706 J kg⁻¹ K⁻¹\n 1157.7915050948404 J kg⁻¹ K⁻¹\n 1172.3554874197264 J kg⁻¹ K⁻¹\n 1186.9194697445964 J kg⁻¹ K⁻¹\n  1201.483452069455 J kg⁻¹ K⁻¹\n 1216.0474343943067 J kg⁻¹ K⁻¹\n\n\n\n\n\n","category":"function"},{"location":"man/heatcapacity/#GeoParams.MaterialParameters.HeatCapacity.compute_heatcapacity!","page":"Heat Capacity","title":"GeoParams.MaterialParameters.HeatCapacity.compute_heatcapacity!","text":"compute_heatcapacity!(Cp::AbstractArray{<:AbstractFloat}, MatParam::AbstractArray{<:AbstractMaterialParamsStruct}, Phases::AbstractArray{<:Integer}, P::AbstractArray{<:AbstractFloat},T::AbstractArray{<:AbstractFloat})\n\nIn-place computation of heat capacity Cp for the whole domain and all phases, in case a vector with phase properties MatParam is provided, along with P and T arrays. This assumes that the Phase of every point is specified as an Integer in the Phases array.\n\n\n\n\n\n","category":"function"},{"location":"man/melting/#Melting-Parameterizations","page":"Partial Melting","title":"Melting Parameterizations","text":"","category":"section"},{"location":"man/melting/#Methods","page":"Partial Melting","title":"Methods","text":"","category":"section"},{"location":"man/melting/","page":"Partial Melting","title":"Partial Melting","text":"A number of melting parameterisations are implemented, which can be set with:","category":"page"},{"location":"man/melting/","page":"Partial Melting","title":"Partial Melting","text":"GeoParams.MeltingParam.MeltingParam_Caricchi\nGeoParams.MeltingParam.MeltingParam_5thOrder\nGeoParams.MeltingParam.MeltingParam_4thOrder\nGeoParams.MeltingParam.MeltingParam_Quadratic\nGeoParams.MeltingParam.MeltingParam_Assimilation\nGeoParams.MeltingParam.SmoothMelting","category":"page"},{"location":"man/melting/#GeoParams.MeltingParam.MeltingParam_Caricchi","page":"Partial Melting","title":"GeoParams.MeltingParam.MeltingParam_Caricchi","text":"MeltingParam_Caricchi()\n\nImplements the T-dependent melting parameterisation used by Caricchi, Simpson et al. (as for example described in Simpson) \n\n    theta = (a - (T + c)) over b \n\n    phi_melt = 10 over (10 + e^theta)\n\nNote that T is in Kelvin. As default parameters we employ:\n\nb=23K  a=800K  c=27315K\n\nWhich gives a reasonable fit to experimental data of granodioritic composition (Piwinskii and Wyllie, 1968):\n\n(Image: MeltParam_Carrichi)\n\nReferences\n\nSimpson G. (2017) Practical finite element modelling in Earth Sciences Using MATLAB.\n\n\n\n\n\n","category":"type"},{"location":"man/melting/#GeoParams.MeltingParam.MeltingParam_5thOrder","page":"Partial Melting","title":"GeoParams.MeltingParam.MeltingParam_5thOrder","text":"MeltingParam_5thOrder(a,b,c,d,e,f,T_s,T_l)\n\nUses a 5th order polynomial to describe the melt fraction phi between solidus temperature T_s and liquidus temperature T_l\n\n    phi = a T^5 + b T^4 + c T^3 + d T^2 + e T + f  textrm   for    T_s  T  T_l\n\n    phi = 1  textrm   if    TT_l\n\n    phi = 0  textrm   if    TT_s\n\nTemperature T is in Kelvin.\n\n(Image: MeltingParam_5thOrder)\n\nThe default values are for a composite liquid-line-of-descent:\n\nthe upper part is for Andesite from: (Blatter, D. L. & Carmichael, I. S. (2001) Hydrous phase equilibria of a Mexican highsilica andesite: a candidate for a mantle origin? Geochim. Cosmochim. Acta 65, 4043–4065\nthe lower part is extrapolated to the granitic minimum using the Marxer & Ulmer LLD for Andesite (Marxer, F. & Ulmer, P. (2019) Crystallisation and zircon saturation of calc-alkaline tonalite from the Adamello Batholith at upper crustal conditions: an experimental study. Contributions Mineral. Petrol. 174, 84)\n\n\n\n\n\n","category":"type"},{"location":"man/melting/#GeoParams.MeltingParam.MeltingParam_4thOrder","page":"Partial Melting","title":"GeoParams.MeltingParam.MeltingParam_4thOrder","text":"MeltingParam_4thOrder(b,c,d,e,f,T_s,T_l)\n\nUses a 4th order polynomial to describe the melt fraction phi between solidus temperature T_s and liquidus temperature T_l\n\n    phi = b T^4 + c T^3 + d T^2 + e T + f  textrm   for    T_s  T  T_l\n\n    phi = 1 textrm   if    TT_l\n\n    phi = 0  textrm   if    TT_s\n\nTemperature T is in Kelvin.\n\n(Image: MeltingParam_4thOrder)\n\nThe default values are for Tonalite experiments from Marxer and Ulmer (2019):\n\nMarxer, F. & Ulmer, P. (2019) Crystallisation and zircon saturation of calc-alkaline tonalite from the Adamello Batholith at upper crustal conditions: an experimental study. Contributions Mineral. Petrol. 174, 84\n\n\n\n\n\n","category":"type"},{"location":"man/melting/#GeoParams.MeltingParam.MeltingParam_Quadratic","page":"Partial Melting","title":"GeoParams.MeltingParam.MeltingParam_Quadratic","text":"MeltingParam_Quadratic(T_s,T_l)\n\nQuadratic melt fraction parameterisation where melt fraction phi depends only on solidus (T_s) and liquidus (T_l) temperature:\n\n    phi = 10 - left( T_l - T over T_l - T_s right)^2\n\n    phi = 10 textrm if  TT_l \n\n    phi = 00 textrm if  TT_s \n\nTemperature T is in Kelvin.\n\n(Image: MeltingParam_Quadratic)\n\nThis was used, among others, in Tierney et al. (2016) Geology\n\n\n\n\n\n","category":"type"},{"location":"man/melting/#GeoParams.MeltingParam.MeltingParam_Assimilation","page":"Partial Melting","title":"GeoParams.MeltingParam.MeltingParam_Assimilation","text":"MeltingParam_Assimilation(T_s,T_l,a)\n\nMelt fraction parameterisation that takes the assimilation of crustal host rocks into account, as used by Tierney et al. (2016) based upon a parameterisation of Spera and Bohrson (2001)\n\nHere, the fraction of molten and assimilated host rocks phi depends on the solidus (T_s) and liquidus (T_l) temperatures of the rocks, as well as on a parameter a=0005\n\n    X = left( T - T_s over T_l - T_s right)\n\n    phi = a cdot left( exp^2ln(100)X - 10 right) textrm if  X  05\n\n    phi = 1- a cdot exp^2ln(100)(1-X)  textrm if  X  05\n\n    phi = 10 textrm if  TT_l \n\n    phi = 00 textrm if  TT_s \n\nTemperature T is in Kelvin.\n\n(Image: MeltingParam_Assimilation)\n\nThis was used, among others, in Tierney et al. (2016), who employed as default parameters:\n\n   T_s=97315 T_l=117315 a=0005\n\nReferences\n\nSpera, F.J., and Bohrson, W.A., 2001, Energy-Constrained Open-System Magmatic Processes I: General Model and Energy-Constrained Assimilation and Fractional Crystallization (EC- AFC) Formulation: Journal of Petrology, v. 42, p. 999–1018.\nTierney, C.R., Schmitt, A.K., Lovera, O.M., de Silva, S.L., 2016. Voluminous plutonism during volcanic quiescence revealed by thermochemical modeling of zircon. Geology 44, 683–686. https://doi.org/10.1130/G37968.1\n\n\n\n\n\n","category":"type"},{"location":"man/melting/#GeoParams.MeltingParam.SmoothMelting","page":"Partial Melting","title":"GeoParams.MeltingParam.SmoothMelting","text":"SmoothMelting(; p=MeltingParam_4thOrder(), k_sol=0.2/K,  k_liq=0.2/K)\n\nThis smoothens the melting parameterisation p around the solidus T_sol and liquidus T_liq using a smoothened Heaviside step functions for the solidus:\n\n    H_sol =  10 over  1 + exp( -2 k_sol (T - T_sol - 2 over k_sol) )  \n\nand liquidus:        \n\n    H_liq =  10 - 10 over  1 + exp( -2 k_liq (T - T_liq + 2 over k_liq) )  \n\nThe resulting melt fraction phi is computed from the original melt fraction phi_0 (computed using one of the methods above) as:\n\n    phi =  phi_0 H_sol H_liq + 10 - H_liq\n\nThe width of the smoothening zones is controlled by k_sol k_liq (larger values = sharper boundary).\n\nThis is important, as jumps in the derivative dϕdT can cause numerical instabilities in latent heat computations, which is prevented with this smoothening.\n\nExample\n\nLet's consider a 4th order parameterisation:\n\njulia> using GeoParams, Plots\njulia> p = MeltingParam_4thOrder();\njulia> T= collect(650.0:1:1050.) .+ 273.15;\njulia> T,phi,dϕdT =  PlotMeltFraction(p,T=T);\n\nThe same but with smoothening:\n\njulia> p_s = SmoothMelting(p=MeltingParam_4thOrder(), k_liq=0.21/K);\n4th order polynomial melting curve: phi = -7.594512597174117e-10T^4 + 3.469192091489447e-6T^3 + -0.00592352980926T^2 + 4.482855645604745T + -1268.730161921053  963.15 K ≤ T ≤ 1270.15 K with smooth Heaviside function smoothening using k_sol=0.1 K⁻¹·⁰, k_liq=0.11 K⁻¹·⁰\njulia> T_s,phi_s,dϕdT_s =  PlotMeltFraction(p_s,T=T);\n\nWe can create plots of this with:\n\njulia> plt1 = plot(T.-273.15, phi, ylabel=\"Melt Fraction ϕ\", color=:red, label=\"original\", xlabel=\"Temperature [C]\")\njulia> plt1 = plot(plt1, T.-273.15, phi_s,  color=:black, label=\"smoothened\", legend=:bottomright)\njulia> plt2 = plot(T.-273.15, dϕdT, ylabel=\"dϕ/dT\", color=:red, label=\"original\", xlabel=\"Temperature [C]\")\njulia> plt2 = plot(plt2, T.-273.15, dϕdT_s,  color=:black, label=\"smoothened\", legend=:topright)\njulia> plot!(plt1,plt2,   xlabel=\"Temperature [C]\", layout=(2,1))\n\nThe derivative no longer has a jump now:\n\n(Image: MeltingParam_Smooth)\n\n\n\n\n\n","category":"type"},{"location":"man/melting/#Computational-routines","page":"Partial Melting","title":"Computational routines","text":"","category":"section"},{"location":"man/melting/","page":"Partial Melting","title":"Partial Melting","text":"To compute the melt fraction at given T and P, use:","category":"page"},{"location":"man/melting/","page":"Partial Melting","title":"Partial Melting","text":"GeoParams.MeltingParam.compute_meltfraction!\nGeoParams.MeltingParam.compute_meltfraction","category":"page"},{"location":"man/melting/#GeoParams.MeltingParam.compute_meltfraction!","page":"Partial Melting","title":"GeoParams.MeltingParam.compute_meltfraction!","text":"compute_meltfraction!(ϕ::AbstractArray{<:AbstractFloat}, P::AbstractArray{<:AbstractFloat},T:AbstractArray{<:AbstractFloat}, p::PhaseDiagram_LookupTable)\n\nIn-place computation of melt fraction in case we use a phase diagram lookup table. The table should have the column :meltFrac specified.\n\n\n\n\n\ncompute_meltfraction(ϕ::AbstractArray{<:AbstractFloat}, Phases::AbstractArray{<:Integer}, P::AbstractArray{<:AbstractFloat},T::AbstractArray{<:AbstractFloat}, MatParam::AbstractArray{<:AbstractMaterialParamsStruct})\n\nIn-place computation of melt fraction ϕ for the whole domain and all phases, in case an array with phase properties MatParam is provided, along with P and T arrays.\n\n\n\n\n\n","category":"function"},{"location":"man/melting/#GeoParams.MeltingParam.compute_meltfraction","page":"Partial Melting","title":"GeoParams.MeltingParam.compute_meltfraction","text":"compute_meltfraction(P,T, p::AbstractPhaseDiagramsStruct)\n\nComputes melt fraction in case we use a phase diagram lookup table. The table should have the column :meltFrac specified.\n\n\n\n\n\nϕ = compute_meltfraction(Phases::AbstractArray{<:Integer}, P::AbstractArray{<:AbstractFloat},T::AbstractArray{<:AbstractFloat}, MatParam::AbstractArray{<:AbstractMaterialParamsStruct})\n\nComputation of melt fraction ϕ for the whole domain and all phases, in case an array with phase properties MatParam is provided, along with P and T arrays.\n\n\n\n\n\n","category":"function"},{"location":"man/melting/","page":"Partial Melting","title":"Partial Melting","text":"You can also obtain the derivative of melt fraction versus temperature with (useful to compute latent heat effects):","category":"page"},{"location":"man/melting/","page":"Partial Melting","title":"Partial Melting","text":"GeoParams.MeltingParam.compute_dϕdT!\nGeoParams.MeltingParam.compute_dϕdT","category":"page"},{"location":"man/melting/#GeoParams.MeltingParam.compute_dϕdT!","page":"Partial Melting","title":"GeoParams.MeltingParam.compute_dϕdT!","text":"compute_dϕdT!(ϕ::AbstractArray{<:AbstractFloat}, Phases::AbstractArray{<:Integer}, P::AbstractArray{<:AbstractFloat},T::AbstractArray{<:AbstractFloat}, MatParam::AbstractArray{<:AbstractMaterialParamsStruct})\n\nComputates the derivative of melt fraction ϕ versus temperature T, partial phi over partial T for the whole domain and all phases, in case an array with phase properties MatParam is provided, along with P and T arrays. This is employed, for example, in computing latent heat terms in an implicit manner.\n\n\n\n\n\n","category":"function"},{"location":"man/melting/#GeoParams.MeltingParam.compute_dϕdT","page":"Partial Melting","title":"GeoParams.MeltingParam.compute_dϕdT","text":"compute_dϕdT(P,T, p::AbstractPhaseDiagramsStruct)\n\nComputes derivative of melt fraction vs T in case we use a phase diagram lookup table. The table should have the column :meltFrac specified. The derivative is computed by finite differencing.\n\n\n\n\n\nϕ = compute_dϕdT(Phases::AbstractArray{<:Integer}, P::AbstractArray{<:AbstractFloat},T::AbstractArray{<:AbstractFloat}, MatParam::AbstractArray{<:AbstractMaterialParamsStruct})\n\nComputates the derivative of melt fraction ϕ versus temperature T for the whole domain and all phases, in case an array with phase properties MatParam is provided, along with P and T arrays. This is employed in computing latent heat terms in an implicit manner, for example\n\n\n\n\n\n","category":"function"},{"location":"man/melting/","page":"Partial Melting","title":"Partial Melting","text":"Also note that phase diagrams can be imported using PerpleX_LaMEM_Diagram, which may also have melt content information.  The computational routines work with that as well.","category":"page"},{"location":"man/melting/#Plotting-routines","page":"Partial Melting","title":"Plotting routines","text":"","category":"section"},{"location":"man/melting/","page":"Partial Melting","title":"Partial Melting","text":"You can use the routine PlotMeltFraction to create a plot, provided that the Plots package has been loaded","category":"page"},{"location":"man/melting/","page":"Partial Melting","title":"Partial Melting","text":"GeoParams.PlotMeltFraction","category":"page"},{"location":"man/elasticity/#Elasticity","page":"Elasticity","title":"Elasticity","text":"","category":"section"},{"location":"man/elasticity/","page":"Elasticity","title":"Elasticity","text":"Elasticity is, in geodynamics, often used in combination with viscous and plastic rheology.","category":"page"},{"location":"man/elasticity/#Implemented-laws","page":"Elasticity","title":"Implemented laws","text":"","category":"section"},{"location":"man/elasticity/","page":"Elasticity","title":"Elasticity","text":"We provide the following elastic constitutive relationships:","category":"page"},{"location":"man/elasticity/","page":"Elasticity","title":"Elasticity","text":"GeoParams.ConstantElasticity\nGeoParams.SetConstantElasticity","category":"page"},{"location":"man/elasticity/#GeoParams.MaterialParameters.ConstitutiveRelationships.ConstantElasticity","page":"Elasticity","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.ConstantElasticity","text":"ConstantElasticity(G, ν, K, E)\n\nStructure that holds parameters for constant, isotropic, linear elasticity.\n\n\n\n\n\n","category":"type"},{"location":"man/elasticity/#GeoParams.MaterialParameters.ConstitutiveRelationships.SetConstantElasticity","page":"Elasticity","title":"GeoParams.MaterialParameters.ConstitutiveRelationships.SetConstantElasticity","text":"SetConstantElasticity(; G=nothing, ν=nothing, E=nothing, Kb=nothing)\n\nThis allows setting elastic parameters by specifying 2 out of the 4 elastic parameters G (Elastic shear modulus), ν (Poisson's ratio), E (Young's modulus), or Kb (bulk modulus).\n\n\n\n\n\n","category":"function"},{"location":"man/elasticity/#Computational-routines","page":"Elasticity","title":"Computational routines","text":"","category":"section"},{"location":"man/elasticity/","page":"Elasticity","title":"Elasticity","text":"We can compute the elastic strainrate with:","category":"page"},{"location":"man/elasticity/","page":"Elasticity","title":"Elasticity","text":"GeoParams.compute_εII\nGeoParams.compute_εII!","category":"page"},{"location":"man/shearheating/#Shear-heating","page":"Shear heating","title":"Shear heating","text":"","category":"section"},{"location":"man/shearheating/#Methods","page":"Shear heating","title":"Methods","text":"","category":"section"},{"location":"man/shearheating/","page":"Shear heating","title":"Shear heating","text":"Heat caused by non-recoverable deformation can be specified in ","category":"page"},{"location":"man/shearheating/","page":"Shear heating","title":"Shear heating","text":"GeoParams.MaterialParameters.Shearheating.ConstantShearheating","category":"page"},{"location":"man/shearheating/#GeoParams.MaterialParameters.Shearheating.ConstantShearheating","page":"Shear heating","title":"GeoParams.MaterialParameters.Shearheating.ConstantShearheating","text":"ConstantShearheating(Χ=0.0NoUnits)\n\nSet the shear heating efficiency [0-1] parameter\n\nΧ  = cst\n\nwhere Chi is the shear heating efficiency [NoUnits]\n\nShear heating is computed as\n\nH_s = Chi cdot tau_ij(dotvarepsilon_ij - dotvarepsilon^el_ij)\n\n\n\n\n\n","category":"type"},{"location":"man/shearheating/#Computational-routines","page":"Shear heating","title":"Computational routines","text":"","category":"section"},{"location":"man/shearheating/","page":"Shear heating","title":"Shear heating","text":"To compute, use this:","category":"page"},{"location":"man/shearheating/","page":"Shear heating","title":"Shear heating","text":"GeoParams.MaterialParameters.Shearheating.compute_shearheating\nGeoParams.MaterialParameters.Shearheating.compute_shearheating!","category":"page"},{"location":"man/shearheating/#GeoParams.MaterialParameters.Shearheating.compute_shearheating","page":"Shear heating","title":"GeoParams.MaterialParameters.Shearheating.compute_shearheating","text":"H_s = compute_shearheating(s:<AbstractShearheating, τ, ε, ε_el)\n\nComputes the shear heating source term\n\nH_s = Chi cdot tau_ij ( dotvarepsilon_ij - dotvarepsilon^el_ij)\n\nParameters\n\nChi : The efficiency of shear heating (between 0-1)\ntau_ij : The full deviatoric stress tensor [4 components in 2D; 9 in 3D]\ndotvarepsilon_ij : The full deviatoric strainrate tensor\ndotvarepsilon^el_ij : The full elastic deviatoric strainrate tensor\n\n\n\n\n\nH_s = ComputeShearheating(s:<AbstractShearheating, τ, ε)\n\nComputes the shear heating source term when there is no elasticity\n\nH_s = Chi cdot tau_ij  dotvarepsilon_ij \n\nParameters\n\nChi : The efficiency of shear heating (between 0-1)\ntau_ij : The full deviatoric stress tensor [4 components in 2D; 9 in 3D]\ndotvarepsilon_ij : The full deviatoric strainrate tensor\n\n\n\n\n\n","category":"function"},{"location":"man/shearheating/#GeoParams.MaterialParameters.Shearheating.compute_shearheating!","page":"Shear heating","title":"GeoParams.MaterialParameters.Shearheating.compute_shearheating!","text":"compute_shearheating!(H_s, s:<AbstractShearheating,  τ, ε, ε_el)\n\nComputes the shear heating source term in-place\n\nH_s = Chi cdot tau_ij ( dotvarepsilon_ij - dotvarepsilon^el_ij)\n\nParameters\n\nChi : The efficiency of shear heating (between 0-1)\ntau_ij : The full deviatoric stress tensor [4 components in 2D; 9 in 3D]\ndotvarepsilon_ij : The full deviatoric strainrate tensor\ndotvarepsilon^el_ij : The full elastic deviatoric strainrate tensor\n\nNOTE: The shear heating terms require the full deviatoric stress & strain rate tensors, i.e.:\n\n2D tau_ij = left(   \n                beginmatrix\n                    tau_xx  tau_xz \n                    tau_zx  tau_zz \n                endmatrix \n            right)\n\nSince tau_zx=tau_xz, most geodynamic codes only take one of the terms into account; shear heating requires all components to be used! \n\n\n\n\n\ncompute_shearheating!(H_s, s:<AbstractShearheating, τ, ε)\n\nComputes the shear heating source term H_s in-place when there is no elasticity\n\nH_s = Chi cdot tau_ij  dotvarepsilon_ij \n\nParameters\n\nChi : The efficiency of shear heating (between 0-1)\ntau_ij : The full deviatoric stress tensor [4 components in 2D; 9 in 3D]\ndotvarepsilon_ij : The full deviatoric strainrate tensor\n\n\n\n\n\n","category":"function"},{"location":"man/nondimensionalize/#Nondimensionalization","page":"Nondimensionalization","title":"Nondimensionalization","text":"","category":"section"},{"location":"man/nondimensionalize/","page":"Nondimensionalization","title":"Nondimensionalization","text":"Create a nondimensionalization object in which we specify characteristic values, which are later employed to non-dimensionalize (or dimensionalize) all model parameters. Choose between GEO, SI or NO units:","category":"page"},{"location":"man/nondimensionalize/","page":"Nondimensionalization","title":"Nondimensionalization","text":"SI units assume all input and output is in SI units. Very general, but for typical geodynamic simulations often not so useful (as a million years has many seconds, resulting in large numbers).\nGEO units uses SI units throughout but assumes that input/output are in a format that is more convenient for typical geodynamic use cases, such as Myrs,km or MPa\nNO units are nondimensional units. Note that for parameters to be correctly non-dimensionalized in this case, you still have to indicate units (such as that velocity is given in m/s).","category":"page"},{"location":"man/nondimensionalize/","page":"Nondimensionalization","title":"Nondimensionalization","text":"A dimensional parameter can be transformed into a non-dimensional one with nondimensionalize.","category":"page"},{"location":"man/nondimensionalize/#Specify-characteristic-values","page":"Nondimensionalization","title":"Specify characteristic values","text":"","category":"section"},{"location":"man/nondimensionalize/","page":"Nondimensionalization","title":"Nondimensionalization","text":"Characteristic values can be defined in 3 ways.","category":"page"},{"location":"man/nondimensionalize/","page":"Nondimensionalization","title":"Nondimensionalization","text":"GeoParams.Units\nAbstractGeoUnit\nGeoUnit\nGeoUnits\nGEO_units\nSI_units\nNO_units\n@unpack_val\n@unpack_units","category":"page"},{"location":"man/nondimensionalize/#GeoParams.Units","page":"Nondimensionalization","title":"GeoParams.Units","text":"This provides units and creates a non-dimensionalization object\n\n\n\n\n\n","category":"module"},{"location":"man/nondimensionalize/#GeoParams.Units.AbstractGeoUnit","page":"Nondimensionalization","title":"GeoParams.Units.AbstractGeoUnit","text":"AbstractGeoUnit\n\nAbstract supertype for geo units.\n\n\n\n\n\n","category":"type"},{"location":"man/nondimensionalize/#GeoParams.Units.GeoUnit","page":"Nondimensionalization","title":"GeoParams.Units.GeoUnit","text":"Structure that holds a GeoUnit parameter, and encodes the units and whether it is dimensional or not in the name.\n\nHaving that is useful, as non-dimensionalization removes the units from a number and we thus no longer know how to transfer it back to the correct units.\nWith the GeoUnit struct, this information is retained, and we can thus redimensionalize it at a later StepRange\n\n\n\n\n\n","category":"type"},{"location":"man/nondimensionalize/#GeoParams.Units.GeoUnits","page":"Nondimensionalization","title":"GeoParams.Units.GeoUnits","text":"GeoUnits\n\nStructure that holds parameters used for non-dimensionalization\n\n\n\n\n\n","category":"type"},{"location":"man/nondimensionalize/#GeoParams.Units.GEO_units","page":"Nondimensionalization","title":"GeoParams.Units.GEO_units","text":"GEO_units(;length=1000km, temperature=1000C, stress=10MPa, viscosity=1e20Pas)\n\nCreates a non-dimensionalization object using GEO units.\n\nGEO units implies that upon dimensionalization, time will be in Myrs, length in km, stress in MPa, etc. which is more convenient for typical geodynamic simulations than SI units The characteristic values given as input can be in arbitrary units (km or m), provided the unit is specified.\n\nExamples:\n\njulia> CharUnits = GEO_units()\nEmploying GEO units \nCharacteristic values: \n         length:      1000 km\n         time:        0.3169 Myrs\n         stress:      10 MPa\n         temperature: 1000.0 °C\njulia> CharUnits.velocity\n1.0e-7 m s⁻¹\n\nIf we instead have a crustal-scale simulation, it is likely more appropriate to use a different characteristic length:\n\njulia> CharUnits = GEO_units(length=10km)\nEmploying GEO units \nCharacteristic values: \n         length:      10 km\n         time:        0.3169 Myrs\n         stress:      10 MPa\n         temperature: 1000.0 °C\n\n\n\n\n\n","category":"function"},{"location":"man/nondimensionalize/#GeoParams.Units.SI_units","page":"Nondimensionalization","title":"GeoParams.Units.SI_units","text":"CharUnits = SI_units(length=1000m, temperature=1000K, stress=10Pa, viscosity=1e20)\n\nSpecify the characteristic values using SI units \n\nExamples:\n\njulia> CharUnits = SI_units(length=1000m)\nEmploying SI units \nCharacteristic values: \n         length:      1000 m\n         time:        1.0e19 s\n         stress:      10 Pa\n         temperature: 1000.0 K\n\nNote that the same can be achieved if the input is given in km:\n\njulia> CharUnits = SI_units(length=1km)\n\n\n\n\n\n","category":"function"},{"location":"man/nondimensionalize/#GeoParams.Units.NO_units","page":"Nondimensionalization","title":"GeoParams.Units.NO_units","text":"CharUnits = NO_units(length=1, temperature=1, stress=1, viscosity=1)\n\nSpecify the characteristic values in non-dimensional units\n\nExamples:\n\njulia> using GeoParams;\njulia> CharUnits = NO_units()\nEmploying NONE units \nCharacteristic values: \n         length:      1\n         time:        1.0 \n         stress:      1\n         temperature: 1.0\n\n\n\n\n\n","category":"function"},{"location":"man/nondimensionalize/#GeoParams.Units.@unpack_val","page":"Nondimensionalization","title":"GeoParams.Units.@unpack_val","text":"This unpacks the numerical value of `GeoUnit` in a structure, without the units.\nAll requested variables must be GeoUnits.\n\nThis is a modification of the `@unpack` macro as implemented in the `UnPack.jl` package, which can be used to retrieve the full variables.\n\nExample\n\njulia> struct Density{T} \n        ρ::GeoUnit{T} \n        α::GeoUnit{T} \n       end\njulia> r = Density(GeoUnit(100kg/m^3),GeoUnit(4e-5/K));\njulia> @unpack_val ρ,α = r\njulia> α\n4.0e-5\njulia> typeof(α)\nFloat64\n\n\n\n\n\n","category":"macro"},{"location":"man/nondimensionalize/#GeoParams.Units.@unpack_units","page":"Nondimensionalization","title":"GeoParams.Units.@unpack_units","text":"This unpacks the numerical value with units of `GeoUnit` parameters in a structure\nAll requested variables must be GeoUnits.\n\nThis is a modification of the `@unpack` macro as implemented in the `UnPack.jl` package, which can be used to retrieve the full variables.\n\nExample\n\njulia> struct Density{T} \n        ρ::GeoUnit{T} \n        α::GeoUnit{T} \n       end\njulia> r = Density(GeoUnit(100kg/m^3),GeoUnit(4e-5/K));\njulia> @unpack_units ρ,α = r\njulia> α\n4.0e-5 K⁻¹·⁰\njulia> typeof(α)\nQuantity{Float64, 𝚯⁻¹·⁰, Unitful.FreeUnits{(K⁻¹·⁰,), 𝚯⁻¹·⁰, nothing}}\n\n\n\n\n\n","category":"macro"},{"location":"man/nondimensionalize/#(Non)-dimensionalize-parameters","page":"Nondimensionalization","title":"(Non)-dimensionalize parameters","text":"","category":"section"},{"location":"man/nondimensionalize/","page":"Nondimensionalization","title":"Nondimensionalization","text":"Once characteristic values have been defined, you can use them to non-dimensionalize or dimensionalize any parameter.","category":"page"},{"location":"man/nondimensionalize/","page":"Nondimensionalization","title":"Nondimensionalization","text":"nondimensionalize\ndimensionalize\nisDimensional","category":"page"},{"location":"man/nondimensionalize/#GeoParams.Units.nondimensionalize","page":"Nondimensionalization","title":"GeoParams.Units.nondimensionalize","text":"nondimensionalize(param, CharUnits::GeoUnits{TYPE})\n\nNondimensionalizes param using the characteristic values specified in CharUnits\n\nExample 1\n\njulia> using GeoParams;\njulia> CharUnits =   GEO_units();\njulia> v         =   3cm/yr\n3 cm yr⁻¹ \njulia> v_ND      =   nondimensionalize(v, CharUnits) \n0.009506426344208684\n\nExample 2\n\nIn geodynamics one sometimes encounters more funky units\n\njulia> CharUnits =   GEO_units();\njulia> A         =   6.3e-2MPa^-3.05*s^-1\n0.063 MPa⁻³·⁰⁵ s⁻¹\njulia> A_ND      =   nondimensionalize(A, CharUnits) \n7.068716262102384e14\n\nIn case you are interested to see how the units of A look like in different units, use this function from the Unitful package:\n\njulia> uconvert(u\"Pa^-3.05*s^-1\",A) \n3.157479571851836e-20 Pa⁻³·⁰⁵\n\nand to see it decomposed in the basic SI units of length, mass and time:\n\njulia> upreferred(A)\n3.1574795718518295e-20 m³·⁰⁵ s⁵·¹ kg⁻³·⁰⁵\n\n\n\n\n\nMatParam_ND = nondimensionalize(MatParam::AbstractMaterialParam, CharUnits::GeoUnits{TYPE})\n\nNon-dimensionalizes a material parameter structure (e.g., Density, CreepLaw)\n\n\n\n\n\nnondimensionalize(phase_mat::MaterialParams, g::GeoUnits{TYPE})\n\nnondimensionalizes all fields within the Material Parameters structure that contain material parameters\n\n\n\n\n\n","category":"function"},{"location":"man/nondimensionalize/#GeoParams.Units.dimensionalize","page":"Nondimensionalization","title":"GeoParams.Units.dimensionalize","text":"dimensionalize(param, param_dim::Unitful.FreeUnits, CharUnits::GeoUnits{TYPE})\n\nDimensionalizes param into the dimensions param_dim using the characteristic values specified in CharUnits.  \n\nExample\n\njulia> CharUnits =   GEO_units();\njulia> v_ND      =   nondimensionalize(3cm/yr, CharUnits) \n0.031688087814028945\njulia> v_dim     =   dimensionalize(v_ND, cm/yr, CharUnits) \n3.0 cm yr⁻¹\n\n\n\n\n\ndimensionalize(MatParam::AbstractMaterialParam, CharUnits::GeoUnits{TYPE})\n\nDimensionalizes a material parameter structure (e.g., Density, CreepLaw)\n\n\n\n\n\nDimensionalize(phase_mat::MaterialParams, g::GeoUnits{TYPE})\n\nDimensionalizes all fields within the Material Parameters structure that contain material parameters\n\n\n\n\n\n","category":"function"},{"location":"man/nondimensionalize/#GeoParams.Units.isDimensional","page":"Nondimensionalization","title":"GeoParams.Units.isDimensional","text":"isDimensional(MatParam::AbstractMaterialParam)\n\ntrue if MatParam is in dimensional units.    \n\n\n\n\n\n","category":"function"},{"location":"man/density/#Density","page":"Density","title":"Density","text":"","category":"section"},{"location":"man/density/#Methods","page":"Density","title":"Methods","text":"","category":"section"},{"location":"man/density/","page":"Density","title":"Density","text":"The density equation of state can be specified in a number of ways","category":"page"},{"location":"man/density/","page":"Density","title":"Density","text":"GeoParams.MaterialParameters.Density.ConstantDensity\nGeoParams.MaterialParameters.Density.PT_Density\nGeoParams.MaterialParameters.Density.Compressible_Density","category":"page"},{"location":"man/density/#GeoParams.MaterialParameters.Density.ConstantDensity","page":"Density","title":"GeoParams.MaterialParameters.Density.ConstantDensity","text":"ConstantDensity(ρ=2900kg/m^3)\n\nSet a constant density:\n\n    rho  = cst\n\nwhere rho is the density [kgm^3].\n\n\n\n\n\n","category":"type"},{"location":"man/density/#GeoParams.MaterialParameters.Density.PT_Density","page":"Density","title":"GeoParams.MaterialParameters.Density.PT_Density","text":"PT_Density(ρ0=2900kg/m^3, α=3e-5/K, β=1e-9/Pa, T0=0C, P=0MPa)\n\nSet a pressure and temperature-dependent density:\n\n    rho  = rho_0 (10 - alpha (T-T_0) + beta  (P-P_0) )  \n\nwhere rho_0 is the density [kgm^3] at reference temperature T_0 and pressure P_0, alpha is the temperature dependence of density and beta the pressure dependence.\n\n\n\n\n\n","category":"type"},{"location":"man/density/#GeoParams.MaterialParameters.Density.Compressible_Density","page":"Density","title":"GeoParams.MaterialParameters.Density.Compressible_Density","text":"Compressible_Density(ρ0=2900kg/m^3, β=1e-9/Pa, P₀=0MPa)\n\nSet a pressure-dependent density:\n\n    rho  = rho_0 exp(β*(P - P_0))  \n\nwhere rho_0 is the density [kgm^3] at reference pressure P_0 and beta the pressure dependence.\n\n\n\n\n\n","category":"type"},{"location":"man/density/#Computational-routines","page":"Density","title":"Computational routines","text":"","category":"section"},{"location":"man/density/","page":"Density","title":"Density","text":"To evaluate density within a user routine, use this:","category":"page"},{"location":"man/density/","page":"Density","title":"Density","text":"GeoParams.MaterialParameters.Density.compute_density\nGeoParams.MaterialParameters.Density.compute_density!","category":"page"},{"location":"man/density/#GeoParams.MaterialParameters.Density.compute_density","page":"Density","title":"GeoParams.MaterialParameters.Density.compute_density","text":"compute_density(P,T, s::PhaseDiagram_LookupTable)\n\nInterpolates density as a function of T,P from a lookup table  \n\n\n\n\n\n","category":"function"},{"location":"man/density/#GeoParams.MaterialParameters.Density.compute_density!","page":"Density","title":"GeoParams.MaterialParameters.Density.compute_density!","text":"compute_density!(rho::AbstractArray{_T, ndim}, MatParam::NTuple{N,AbstractMaterialParamsStruct}, Phases::AbstractArray{_I, ndim}; P=nothing, T=nothing) where {ndim,N,_T,_I<:Integer}\n\nIn-place computation of density rho for the whole domain and all phases, in case a vector with phase properties MatParam is provided, along with P and T arrays. This assumes that the Phase of every point is specified as an Integer in the Phases array.\n\nExample\n\njulia> MatParam = (SetMaterialParams(Name=\"Mantle\", Phase=1,\n                        CreepLaws= (PowerlawViscous(), LinearViscous(η=1e23Pa*s)),\n                        Density   = PT_Density()\n                        ),\n                    SetMaterialParams(Name=\"Crust\", Phase=2,\n                        CreepLaws= (PowerlawViscous(), LinearViscous(η=1e23Pas)),\n                        Density   = ConstantDensity(ρ=2900kg/m^3))\n                  );\njulia> Phases = ones(Int64,400,400);\njulia> Phases[:,20:end] .= 2\njulia> rho     = zeros(size(Phases))\njulia> T       =  ones(size(Phases))\njulia> P       =  ones(size(Phases))*10\njulia> compute_density!(rho, MatParam, Phases, P, T)\njulia> rho\n400×400 Matrix{Float64}:\n2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  …  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  …  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  …  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n    ⋮                                            ⋮                                         ⋱     ⋮                                       ⋮                            \n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  …  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  …  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n 2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91  2899.91     2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0  2900.0\n\nThe routine is made to minimize allocations:\n\njulia> using BenchmarkTools\njulia> @btime compute_density!($rho, $MatParam, $Phases, P=$P, T=$T)\n    203.468 μs (0 allocations: 0 bytes)\n\n_____________________________________________________________________________________________________________________________   \n\ncompute_density!(rho::AbstractArray{_T, N}, MatParam::NTuple{K,AbstractMaterialParamsStruct}, PhaseRatios::AbstractArray{_T, M}, P=nothing, T=nothing)\n\nIn-place computation of density rho for the whole domain and all phases, in case a vector with phase properties MatParam is provided, along with P and T arrays. This assumes that the PhaseRatio of every point is specified as an Integer in the PhaseRatios array, which has one dimension more than the data arrays (and has a phase fraction between 0-1)\n\n\n\n\n\n","category":"function"},{"location":"man/density/","page":"Density","title":"Density","text":"Note that density values are usually not used in itself in the governing PDE's, but usually in combination with other parameters, such as rho g or rho c_p. the non-dimensional value of rho may thus have very large or small values, but multiplied with the other values one often obtains numbers that are closer to one.","category":"page"},{"location":"man/gravity/#Gravitational-acceleration","page":"Gravity","title":"Gravitational acceleration","text":"","category":"section"},{"location":"man/gravity/#Methods","page":"Gravity","title":"Methods","text":"","category":"section"},{"location":"man/gravity/","page":"Gravity","title":"Gravity","text":"Gravitational acceleration is defined as ","category":"page"},{"location":"man/gravity/","page":"Gravity","title":"Gravity","text":"GeoParams.MaterialParameters.GravitationalAcceleration.ConstantGravity","category":"page"},{"location":"man/gravity/#GeoParams.MaterialParameters.GravitationalAcceleration.ConstantGravity","page":"Gravity","title":"GeoParams.MaterialParameters.GravitationalAcceleration.ConstantGravity","text":"GravityConstant(g=9.81m/s^2)\n\nSet a constant value for the gravitational acceleration:\n\n    g  = 981 m s^-2\n\n\n\n\n\n","category":"type"},{"location":"man/gravity/#Computational-routines","page":"Gravity","title":"Computational routines","text":"","category":"section"},{"location":"man/gravity/","page":"Gravity","title":"Gravity","text":"To compute, use this:","category":"page"},{"location":"man/gravity/","page":"Gravity","title":"Gravity","text":"GeoParams.MaterialParameters.GravitationalAcceleration.compute_gravity","category":"page"},{"location":"man/gravity/#GeoParams.MaterialParameters.GravitationalAcceleration.compute_gravity","page":"Gravity","title":"GeoParams.MaterialParameters.GravitationalAcceleration.compute_gravity","text":"compute_gravity(s:<AbstractGravity)\n\nReturns the gravitational acceleration \n\n\n\n\n\n","category":"function"},{"location":"#GeoParams.jl","page":"Home","title":"GeoParams.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Typical geodynamic simulations involve a large number of material parameters that have units that are often inconvenient to be directly used in numerical models. This package has two main features that help with this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Nondimensionalization object, which can be used to transfer dimensional to non-dimensional parameters (usually better for numerical solvers).\nMaterial parameters object in which you can specify  parameters employed in the geodynamic simulations. This object is designed to be extensible and can be passed on to the solvers, such that new creep laws or features can be readily added. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"We also implement some typically used creep law parameters, together with tools to plot them versus and compare our results with those of published papers (to minimize mistakes).","category":"page"},{"location":"man/conductivity/#Conductivity","page":"Conductivity","title":"Conductivity","text":"","category":"section"},{"location":"man/conductivity/#Methods","page":"Conductivity","title":"Methods","text":"","category":"section"},{"location":"man/conductivity/","page":"Conductivity","title":"Conductivity","text":"Thermal conductivity is defined as ","category":"page"},{"location":"man/conductivity/","page":"Conductivity","title":"Conductivity","text":"GeoParams.MaterialParameters.Conductivity.ConstantConductivity\nGeoParams.MaterialParameters.Conductivity.T_Conductivity_Whittington\nGeoParams.MaterialParameters.Conductivity.T_Conductivity_Whittington_parameterised\nGeoParams.MaterialParameters.Conductivity.TP_Conductivity\nGeoParams.MaterialParameters.Conductivity.Set_TP_Conductivity","category":"page"},{"location":"man/conductivity/#GeoParams.MaterialParameters.Conductivity.ConstantConductivity","page":"Conductivity","title":"GeoParams.MaterialParameters.Conductivity.ConstantConductivity","text":"ConstantConductivity(k=3.0W/m/K)\n\nSet a constant conductivity\n\n    k  = cst\n\nwhere k is the thermal conductivity [WmK].\n\n\n\n\n\n","category":"type"},{"location":"man/conductivity/#GeoParams.MaterialParameters.Conductivity.T_Conductivity_Whittington","page":"Conductivity","title":"GeoParams.MaterialParameters.Conductivity.T_Conductivity_Whittington","text":"T_Conductivity_Whittington()\n\nSets a temperature-dependent conductivity following the parameterization of Whittington, A.G., Hofmeister, A.M., Nabelek, P.I., 2009. Temperature-dependent thermal diffusivity of the Earth’s crust and implications for magmatism. Nature 458, 319–321. https://doi.org/10.1038/nature07818.  Their parameterization is originally given for the thermal diffusivity, together with a parameterization for thermal conductivity, which allows us to compute \n\n    Cp = a + b T - cT^2 \n\n    kappa = dT - e textrm if  T=846K\n\n    kappa = f - g*T textrm if  T846K\n\n    rho = 2700 kgm^3\n\n    k = kappa rho Cp\n\nwhere Cp is the heat capacity [JmolK], and abc are parameters that dependent on the temperature T:\n\na = 199.50 J/mol/K    if T<= 846 K\na = 199.50 J/mol/K    if T> 846 K\nb = 0.0857J/mol/K^2   if T<= 846 K\nb = 0.0323J/mol/K^2   if T> 846 K\nc = 5e6J/mol*K        if T<= 846 K\nc = 47.9e-6J/mol*K    if T> 846 K\nd = 576.3m^2/s*K      \ne = 0.062m^2/s        \nf = 0.732m^2/s        \ng = 0.000135m^2/s/K \n\nThis looks like:\n\n(Image: subet1)\n\nExample\n\njulia> using GeoParams, Plots\njulia> p=T_Conductivity_Whittington();\njulia> T,k,plt = PlotConductivity(p)\n\n\n\n\n\n","category":"type"},{"location":"man/conductivity/#GeoParams.MaterialParameters.Conductivity.T_Conductivity_Whittington_parameterised","page":"Conductivity","title":"GeoParams.MaterialParameters.Conductivity.T_Conductivity_Whittington_parameterised","text":"T_Conductivity_Whittington_parameterised()\n\nSets a temperature-dependent conductivity that is  parameterization after Whittington, et al.  2009 \n\nThe original parameterization involves quite a few parameters; this is a polynomial fit that is roughly valid from 0-1000Celcius\n\n    k WmK = -2 10^-9 (T-Ts)^3 + 6 10^-6 (T-Ts)^2 - 00062 (T-Ts) + 4\n\n    Ts = 27315 K\n\nwhere T[K] is the temperature in Kelvin (or the nondimensional equivalent of it).\n\nThe comparison of this parameterisation vs. the original one is: (Image: subet1)\n\n\n\n\n\n","category":"type"},{"location":"man/conductivity/#GeoParams.MaterialParameters.Conductivity.TP_Conductivity","page":"Conductivity","title":"GeoParams.MaterialParameters.Conductivity.TP_Conductivity","text":"TP_Conductivity()\n\nSets a temperature (and pressure)-dependent conductivity parameterization as described in Gerya, Numerical Geodynamics (2nd edition, Table 21.2). The general for  \n\n    k = left( a_k +  b_k over T + c_k right) (1 + d_k P) \n\nwhere k is the conductivity [WKm], and a_kb_kc_kd_k are parameters that dependent on the temperature T and pressure P:\n\na_k = 1.18Watt/K/m    \nb_k = 474Watt/m \nc_k = 77K       \nd_k = 0/MPa       \n\n\n\n\n\n","category":"type"},{"location":"man/conductivity/#GeoParams.MaterialParameters.Conductivity.Set_TP_Conductivity","page":"Conductivity","title":"GeoParams.MaterialParameters.Conductivity.Set_TP_Conductivity","text":"Set_TP_Conductivity[\"Name of temperature(-pressure) dependent conductivity\"]\n\nThis is a dictionary with pre-defined laws:\n\n\"UpperCrust\"    \n\"LowerCrust\"\n\"OceanicCrust\"\n\"Mantle\"\n\nExample\n\njulia> k=Set_TP_Conductivity[\"Mantle\"]\nT/P dependent conductivity: k = (0.73 W K⁻¹ m⁻¹ + 1293 W m⁻¹/(T + 77 K))*(1 + 4.0e-5 MPa⁻¹*P)  \n\n\n\n\n\n","category":"function"},{"location":"man/conductivity/#Computational-routines","page":"Conductivity","title":"Computational routines","text":"","category":"section"},{"location":"man/conductivity/","page":"Conductivity","title":"Conductivity","text":"To compute, use this:","category":"page"},{"location":"man/conductivity/","page":"Conductivity","title":"Conductivity","text":"GeoParams.MaterialParameters.Conductivity.compute_conductivity\nGeoParams.MaterialParameters.Conductivity.compute_conductivity!","category":"page"},{"location":"man/conductivity/#GeoParams.MaterialParameters.Conductivity.compute_conductivity","page":"Conductivity","title":"GeoParams.MaterialParameters.Conductivity.compute_conductivity","text":"k = compute_conductivity(P, T, s:<AbstractConductivity)\n\nReturns the thermal conductivity k at any temperature T and pressure P using any of the parameterizations implemented.\n\nCurrently available:\n\nConstantConductivity\nT_Conductivity_Whittington\nTP_Conductivity\n\nExample\n\nUsing dimensional units\n\njulia> T  = (250:100:1250)*K;\njulia> cp = T_HeatCapacity_Whittington()\njulia> Cp = ComputeHeatCapacity(0,T,cp)\n\n\n\n\n\ncompute_conductivity!(K::AbstractArray{<:AbstractFloat}, Phases::AbstractArray{<:Integer}, P::AbstractArray{<:AbstractFloat},Temp::AbstractArray{<:AbstractFloat}, MatParam::AbstractArray{<:AbstractMaterialParamsStruct})\n\nIn-place computation of conductivity K for the whole domain and all phases, in case a vector with phase properties MatParam is provided, along with P and Temp arrays. This assumes that the Phase of every point is specified as an Integer in the Phases array.\n\n_________________________________________________________________________________________________________\n\ncompute_conductivity!(k::AbstractArray{T,N}, PhaseRatios::AbstractArray{T, M}, P::AbstractArray{<:AbstractFloat,N},T::AbstractArray{<:AbstractFloat,N}, MatParam::AbstractArray{<:AbstractMaterialParamsStruct})\n\nIn-place computation of density rho for the whole domain and all phases, in case a vector with phase properties MatParam is provided, along with P and T arrays. This assumes that the PhaseRatio of every point is specified as an Integer in the PhaseRatios array, which has one dimension more than the data arrays (and has a phase fraction between 0-1)\n\n\n\n\n\n","category":"function"},{"location":"man/conductivity/#GeoParams.MaterialParameters.Conductivity.compute_conductivity!","page":"Conductivity","title":"GeoParams.MaterialParameters.Conductivity.compute_conductivity!","text":"compute_conductivity(k_array::AbstractArray{<:AbstractFloat,N},P::AbstractArray{<:AbstractFloat,N},T::AbstractArray{<:AbstractFloat,N}, s::ConstantConductivity) where N\n\nIn-place routine to compute constant conductivity    \n\n\n\n\n\n","category":"function"}]
}
