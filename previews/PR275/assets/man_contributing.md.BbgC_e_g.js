import{_ as o,c as t,o as i,aA as n}from"./chunks/framework.Peizq498.js";const h=JSON.parse('{"title":"Contributing","description":"","frontmatter":{},"headers":[],"relativePath":"man/contributing.md","filePath":"man/contributing.md","lastUpdated":null}'),a={name:"man/contributing.md"};function l(d,e,s,r,c,p){return i(),t("div",null,e[0]||(e[0]=[n('<h1 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h1><p>This page details the some of the guidelines that should be followed when contributing to this package.</p><p>You can contribute for example by adding new creep laws or by adding new constitutive relationships. If you invest a bit of time now, it will save others in the community a lot of time! The simplest way to do this is by cloning the repository, and creating a new branch for your feature. Once you are happy with what you added (and after you added a test to ensure that it will keep working with future changes), create a pull request and we will evaluate &amp; merge it.</p><h2 id="Style-Guide" tabindex="-1">Style Guide <a class="header-anchor" href="#Style-Guide" aria-label="Permalink to &quot;Style Guide {#Style-Guide}&quot;">​</a></h2><p>Follow the style of the surrounding text when making changes. When adding new features please try to stick to the following points whenever applicable.</p><h3 id="julia" tabindex="-1">Julia <a class="header-anchor" href="#julia" aria-label="Permalink to &quot;Julia&quot;">​</a></h3><ul><li><p>4-space indentation;</p></li><li><p>modules spanning entire files should not be indented, but modules that have surrounding code should;</p></li><li><p>no blank lines at the start or end of files;</p></li><li><p>do not manually align syntax such as <code>=</code> or <code>::</code> over adjacent lines;</p></li><li><p>use <code>function ... end</code> when a method definition contains more than one toplevel expression;</p></li><li><p>related short-form method definitions don&#39;t need a new line between them;</p></li><li><p>unrelated or long-form method definitions must have a blank line separating each one;</p></li><li><p>surround all binary operators with whitespace except for <code>::</code>, <code>^</code>, and <code>:</code>;</p></li><li><p>files containing a single <code>module ... end</code> must be named after the module;</p></li><li><p>method arguments should be ordered based on the amount of usage within the method body;</p></li><li><p>methods extended from other modules must follow their inherited argument order, not the above rule;</p></li><li><p>explicit <code>return</code> should be preferred except in short-form method definitions;</p></li><li><p>avoid dense expressions where possible e.g. prefer nested <code>if</code>s over complex nested <code>?</code>s;</p></li><li><p>include a trailing <code>,</code> in vectors, tuples, or method calls that span several lines;</p></li><li><p>do not use multiline comments (<code>#=</code> and <code>=#</code>);</p></li><li><p>wrap long lines as near to 92 characters as possible, this includes docstrings;</p></li><li><p>follow the standard naming conventions used in <code>Base</code>.</p></li></ul><h3 id="markdown" tabindex="-1">Markdown <a class="header-anchor" href="#markdown" aria-label="Permalink to &quot;Markdown&quot;">​</a></h3><ul><li><p>Use unbalanced <code>#</code> headers, i.e. no <code>#</code> on the right hand side of the header text;</p></li><li><p>include a single blank line between toplevel blocks;</p></li><li><p>unordered lists must use <code>*</code> bullets with two preceding spaces;</p></li><li><p>do <em>not</em> hard wrap lines;</p></li><li><p>use emphasis (<code>*</code>) and bold (<code>**</code>) sparingly;</p></li><li><p>always use fenced code blocks instead of indented blocks;</p></li><li><p>follow the conventions outlined in the Julia documentation page on documentation.</p></li></ul>',9)]))}const m=o(a,[["render",l]]);export{h as __pageData,m as default};
